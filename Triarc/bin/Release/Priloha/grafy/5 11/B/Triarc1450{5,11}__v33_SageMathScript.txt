G = Graph()
G.add_edge(0, 1)
G.add_edge(0, 12)
G.add_edge(1, 2)
G.add_edge(2, 3)
G.add_edge(3, 4)
G.add_edge(4, 5)
G.add_edge(4, 13)
G.add_edge(5, 6)
G.add_edge(6, 7)
G.add_edge(6, 10)
G.add_edge(7, 8)
G.add_edge(8, 9)
G.add_edge(9, 10)
G.add_edge(10, 11)
G.add_edge(11, 12)
G.add_edge(12, 17)
G.add_edge(13, 14)
G.add_edge(13, 20)
G.add_edge(14, 15)
G.add_edge(14, 25)
G.add_edge(15, 16)
G.add_edge(15, 23)
G.add_edge(16, 17)
G.add_edge(16, 21)
G.add_edge(17, 18)
G.add_edge(18, 19)
G.add_edge(18, 22)
G.add_edge(19, 20)
G.add_edge(19, 28)
G.add_edge(20, 27)
G.add_edge(21, 22)
G.add_edge(21, 24)
G.add_edge(22, 32)
G.add_edge(23, 24)
G.add_edge(23, 26)
G.add_edge(24, 31)
G.add_edge(25, 26)
G.add_edge(25, 27)
G.add_edge(26, 30)
G.add_edge(27, 29)
G.add_edge(28, 29)
G.add_edge(28, 32)
G.add_edge(29, 30)
G.add_edge(30, 31)
G.add_edge(31, 32)
outerSize=13
countOfVertices=33
#Now adding vertices for each face, so that the graph is 3-connected.
G.add_edge(33, 6)
G.add_edge(33, 7)
G.add_edge(33, 8)
G.add_edge(33, 9)
G.add_edge(33, 10)
G.add_edge(34, 4)
G.add_edge(34, 5)
G.add_edge(34, 6)
G.add_edge(34, 10)
G.add_edge(34, 11)
G.add_edge(34, 12)
G.add_edge(34, 13)
G.add_edge(34, 14)
G.add_edge(34, 15)
G.add_edge(34, 16)
G.add_edge(34, 17)
G.add_edge(35, 17)
G.add_edge(35, 12)
G.add_edge(35, 0)
G.add_edge(35, 1)
G.add_edge(35, 2)
G.add_edge(35, 3)
G.add_edge(35, 4)
G.add_edge(35, 13)
G.add_edge(35, 18)
G.add_edge(35, 19)
G.add_edge(35, 20)
G.add_edge(36, 16)
G.add_edge(36, 17)
G.add_edge(36, 18)
G.add_edge(36, 21)
G.add_edge(36, 22)
G.add_edge(37, 15)
G.add_edge(37, 16)
G.add_edge(37, 21)
G.add_edge(37, 23)
G.add_edge(37, 24)
G.add_edge(38, 14)
G.add_edge(38, 15)
G.add_edge(38, 23)
G.add_edge(38, 25)
G.add_edge(38, 26)
G.add_edge(39, 20)
G.add_edge(39, 13)
G.add_edge(39, 14)
G.add_edge(39, 25)
G.add_edge(39, 27)
G.add_edge(40, 19)
G.add_edge(40, 20)
G.add_edge(40, 27)
G.add_edge(40, 28)
G.add_edge(40, 29)
G.add_edge(41, 29)
G.add_edge(41, 27)
G.add_edge(41, 25)
G.add_edge(41, 26)
G.add_edge(41, 30)
G.add_edge(42, 30)
G.add_edge(42, 26)
G.add_edge(42, 23)
G.add_edge(42, 24)
G.add_edge(42, 31)
G.add_edge(43, 28)
G.add_edge(43, 29)
G.add_edge(43, 30)
G.add_edge(43, 31)
G.add_edge(43, 32)
G.add_edge(44, 32)
G.add_edge(44, 31)
G.add_edge(44, 24)
G.add_edge(44, 21)
G.add_edge(44, 22)
G.add_edge(45, 18)
G.add_edge(45, 19)
G.add_edge(45, 28)
G.add_edge(45, 32)
G.add_edge(45, 22)
def scaling(x,i,j,n):
    return x*(n-j)

A = G.adjacency_matrix();

n = G.num_verts()
Munscaled = matrix(QQ, n,n, lambda i,j:-A[i,j]/G.degree(i) if i>=outerSize else 0) + identity_matrix(n)
M=matrix(QQ,n,n,lambda i,j: scaling(Munscaled[i,j],i,j,n) if i>j & i<countOfVertices else Munscaled[i,j])
jednicky = matrix(QQ,n,1,lambda i,j: -1)
soucty = M*jednicky
for i in range (n-outerSize):
    M[i+outerSize,i+outerSize]+=soucty[i+outerSize,0]

vy = matrix(QQ,n,1, lambda i,j:round(sin(i/outerSize*2*pi)*1000) if i<outerSize else 0)
vx = matrix(QQ,n,1, lambda i,j:round(cos(i/outerSize*2*pi)*1000) if i<outerSize else 0)
resX=M.inverse() * vx
resY=M.inverse()*vy
i=0
d=[[resX[i],resY[i]] for i in range(n)]

G.graphplot(save_pos=True)
dd=G.get_pos()

for i in range(n):
    dd[i]=[resX[i,0],resY[i,0]]

G.set_pos(dd)
#removing vertices that were used to make graph 3-connected
ran = range(countOfVertices, n)
G.delete_vertices(ran)
G.show()
