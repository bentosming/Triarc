G = Graph()
G.add_edge(0, 1)
G.add_edge(0, 17)
G.add_edge(1, 2)
G.add_edge(2, 3)
G.add_edge(2, 19)
G.add_edge(3, 4)
G.add_edge(4, 5)
G.add_edge(4, 8)
G.add_edge(5, 6)
G.add_edge(6, 7)
G.add_edge(7, 8)
G.add_edge(8, 9)
G.add_edge(9, 10)
G.add_edge(10, 11)
G.add_edge(10, 14)
G.add_edge(11, 12)
G.add_edge(12, 13)
G.add_edge(13, 14)
G.add_edge(14, 15)
G.add_edge(15, 16)
G.add_edge(16, 17)
G.add_edge(16, 18)
G.add_edge(18, 19)
G.add_edge(18, 20)
G.add_edge(19, 22)
G.add_edge(20, 21)
G.add_edge(20, 24)
G.add_edge(21, 22)
G.add_edge(21, 26)
G.add_edge(22, 23)
G.add_edge(23, 24)
G.add_edge(23, 25)
G.add_edge(24, 27)
G.add_edge(25, 26)
G.add_edge(25, 28)
G.add_edge(26, 30)
G.add_edge(27, 28)
G.add_edge(27, 31)
G.add_edge(28, 29)
G.add_edge(29, 30)
G.add_edge(29, 32)
G.add_edge(30, 33)
G.add_edge(31, 32)
G.add_edge(31, 36)
G.add_edge(32, 37)
G.add_edge(33, 34)
G.add_edge(33, 37)
G.add_edge(34, 35)
G.add_edge(34, 38)
G.add_edge(35, 36)
G.add_edge(35, 40)
G.add_edge(36, 42)
G.add_edge(37, 39)
G.add_edge(38, 39)
G.add_edge(38, 41)
G.add_edge(39, 45)
G.add_edge(40, 41)
G.add_edge(40, 43)
G.add_edge(41, 44)
G.add_edge(42, 43)
G.add_edge(42, 50)
G.add_edge(43, 46)
G.add_edge(44, 45)
G.add_edge(44, 46)
G.add_edge(45, 47)
G.add_edge(46, 51)
G.add_edge(47, 48)
G.add_edge(47, 51)
G.add_edge(48, 49)
G.add_edge(48, 54)
G.add_edge(49, 50)
G.add_edge(49, 52)
G.add_edge(50, 51)
G.add_edge(52, 53)
G.add_edge(52, 58)
G.add_edge(53, 54)
G.add_edge(53, 74)
G.add_edge(54, 55)
G.add_edge(55, 56)
G.add_edge(55, 67)
G.add_edge(56, 57)
G.add_edge(56, 61)
G.add_edge(57, 58)
G.add_edge(57, 59)
G.add_edge(58, 62)
G.add_edge(59, 60)
G.add_edge(59, 63)
G.add_edge(60, 61)
G.add_edge(60, 65)
G.add_edge(61, 66)
G.add_edge(62, 63)
G.add_edge(62, 72)
G.add_edge(63, 64)
G.add_edge(64, 65)
G.add_edge(64, 69)
G.add_edge(65, 68)
G.add_edge(66, 67)
G.add_edge(66, 68)
G.add_edge(67, 71)
G.add_edge(68, 70)
G.add_edge(69, 70)
G.add_edge(69, 72)
G.add_edge(70, 71)
G.add_edge(71, 73)
G.add_edge(72, 73)
G.add_edge(73, 78)
G.add_edge(74, 75)
G.add_edge(74, 81)
G.add_edge(75, 76)
G.add_edge(75, 86)
G.add_edge(76, 77)
G.add_edge(76, 84)
G.add_edge(77, 78)
G.add_edge(77, 82)
G.add_edge(78, 79)
G.add_edge(79, 80)
G.add_edge(79, 83)
G.add_edge(80, 81)
G.add_edge(80, 91)
G.add_edge(81, 92)
G.add_edge(82, 83)
G.add_edge(82, 85)
G.add_edge(83, 90)
G.add_edge(84, 85)
G.add_edge(84, 87)
G.add_edge(85, 89)
G.add_edge(86, 87)
G.add_edge(86, 92)
G.add_edge(87, 88)
G.add_edge(88, 89)
G.add_edge(88, 93)
G.add_edge(89, 90)
G.add_edge(90, 91)
G.add_edge(91, 93)
G.add_edge(92, 93)
outerSize=18
countOfVertices=94
#Now adding vertices for each face, so that the graph is 3-connected.
G.add_edge(94, 14)
G.add_edge(94, 13)
G.add_edge(94, 12)
G.add_edge(94, 11)
G.add_edge(94, 10)
G.add_edge(95, 8)
G.add_edge(95, 7)
G.add_edge(95, 6)
G.add_edge(95, 5)
G.add_edge(95, 4)
G.add_edge(96, 16)
G.add_edge(96, 15)
G.add_edge(96, 14)
G.add_edge(96, 10)
G.add_edge(96, 9)
G.add_edge(96, 8)
G.add_edge(96, 4)
G.add_edge(96, 3)
G.add_edge(96, 2)
G.add_edge(96, 18)
G.add_edge(96, 19)
G.add_edge(97, 18)
G.add_edge(97, 19)
G.add_edge(97, 20)
G.add_edge(97, 21)
G.add_edge(97, 22)
G.add_edge(98, 22)
G.add_edge(98, 19)
G.add_edge(98, 2)
G.add_edge(98, 1)
G.add_edge(98, 0)
G.add_edge(98, 17)
G.add_edge(98, 16)
G.add_edge(98, 18)
G.add_edge(98, 20)
G.add_edge(98, 23)
G.add_edge(98, 24)
G.add_edge(99, 23)
G.add_edge(99, 22)
G.add_edge(99, 21)
G.add_edge(99, 25)
G.add_edge(99, 26)
G.add_edge(100, 24)
G.add_edge(100, 23)
G.add_edge(100, 25)
G.add_edge(100, 27)
G.add_edge(100, 28)
G.add_edge(101, 28)
G.add_edge(101, 25)
G.add_edge(101, 26)
G.add_edge(101, 29)
G.add_edge(101, 30)
G.add_edge(102, 27)
G.add_edge(102, 28)
G.add_edge(102, 29)
G.add_edge(102, 31)
G.add_edge(102, 32)
G.add_edge(103, 30)
G.add_edge(103, 26)
G.add_edge(103, 21)
G.add_edge(103, 20)
G.add_edge(103, 24)
G.add_edge(103, 27)
G.add_edge(103, 31)
G.add_edge(103, 33)
G.add_edge(103, 34)
G.add_edge(103, 35)
G.add_edge(103, 36)
G.add_edge(104, 33)
G.add_edge(104, 30)
G.add_edge(104, 29)
G.add_edge(104, 32)
G.add_edge(104, 37)
G.add_edge(105, 34)
G.add_edge(105, 33)
G.add_edge(105, 37)
G.add_edge(105, 38)
G.add_edge(105, 39)
G.add_edge(106, 35)
G.add_edge(106, 34)
G.add_edge(106, 38)
G.add_edge(106, 40)
G.add_edge(106, 41)
G.add_edge(107, 36)
G.add_edge(107, 35)
G.add_edge(107, 40)
G.add_edge(107, 42)
G.add_edge(107, 43)
G.add_edge(108, 41)
G.add_edge(108, 38)
G.add_edge(108, 39)
G.add_edge(108, 44)
G.add_edge(108, 45)
G.add_edge(109, 43)
G.add_edge(109, 40)
G.add_edge(109, 41)
G.add_edge(109, 44)
G.add_edge(109, 46)
G.add_edge(110, 45)
G.add_edge(110, 39)
G.add_edge(110, 37)
G.add_edge(110, 32)
G.add_edge(110, 31)
G.add_edge(110, 36)
G.add_edge(110, 42)
G.add_edge(110, 47)
G.add_edge(110, 48)
G.add_edge(110, 49)
G.add_edge(110, 50)
G.add_edge(111, 47)
G.add_edge(111, 45)
G.add_edge(111, 44)
G.add_edge(111, 46)
G.add_edge(111, 51)
G.add_edge(112, 51)
G.add_edge(112, 46)
G.add_edge(112, 43)
G.add_edge(112, 42)
G.add_edge(112, 50)
G.add_edge(113, 49)
G.add_edge(113, 48)
G.add_edge(113, 52)
G.add_edge(113, 53)
G.add_edge(113, 54)
G.add_edge(114, 54)
G.add_edge(114, 48)
G.add_edge(114, 47)
G.add_edge(114, 51)
G.add_edge(114, 50)
G.add_edge(114, 49)
G.add_edge(114, 52)
G.add_edge(114, 55)
G.add_edge(114, 56)
G.add_edge(114, 57)
G.add_edge(114, 58)
G.add_edge(115, 57)
G.add_edge(115, 56)
G.add_edge(115, 59)
G.add_edge(115, 60)
G.add_edge(115, 61)
G.add_edge(116, 58)
G.add_edge(116, 57)
G.add_edge(116, 59)
G.add_edge(116, 62)
G.add_edge(116, 63)
G.add_edge(117, 63)
G.add_edge(117, 59)
G.add_edge(117, 60)
G.add_edge(117, 64)
G.add_edge(117, 65)
G.add_edge(118, 61)
G.add_edge(118, 56)
G.add_edge(118, 55)
G.add_edge(118, 66)
G.add_edge(118, 67)
G.add_edge(119, 65)
G.add_edge(119, 60)
G.add_edge(119, 61)
G.add_edge(119, 66)
G.add_edge(119, 68)
G.add_edge(120, 64)
G.add_edge(120, 65)
G.add_edge(120, 68)
G.add_edge(120, 69)
G.add_edge(120, 70)
G.add_edge(121, 67)
G.add_edge(121, 66)
G.add_edge(121, 68)
G.add_edge(121, 70)
G.add_edge(121, 71)
G.add_edge(122, 69)
G.add_edge(122, 64)
G.add_edge(122, 63)
G.add_edge(122, 62)
G.add_edge(122, 72)
G.add_edge(123, 71)
G.add_edge(123, 70)
G.add_edge(123, 69)
G.add_edge(123, 72)
G.add_edge(123, 73)
G.add_edge(124, 53)
G.add_edge(124, 54)
G.add_edge(124, 55)
G.add_edge(124, 67)
G.add_edge(124, 71)
G.add_edge(124, 73)
G.add_edge(124, 74)
G.add_edge(124, 75)
G.add_edge(124, 76)
G.add_edge(124, 77)
G.add_edge(124, 78)
G.add_edge(125, 78)
G.add_edge(125, 73)
G.add_edge(125, 72)
G.add_edge(125, 62)
G.add_edge(125, 58)
G.add_edge(125, 52)
G.add_edge(125, 53)
G.add_edge(125, 74)
G.add_edge(125, 79)
G.add_edge(125, 80)
G.add_edge(125, 81)
G.add_edge(126, 77)
G.add_edge(126, 78)
G.add_edge(126, 79)
G.add_edge(126, 82)
G.add_edge(126, 83)
G.add_edge(127, 76)
G.add_edge(127, 77)
G.add_edge(127, 82)
G.add_edge(127, 84)
G.add_edge(127, 85)
G.add_edge(128, 75)
G.add_edge(128, 76)
G.add_edge(128, 84)
G.add_edge(128, 86)
G.add_edge(128, 87)
G.add_edge(129, 87)
G.add_edge(129, 84)
G.add_edge(129, 85)
G.add_edge(129, 88)
G.add_edge(129, 89)
G.add_edge(130, 89)
G.add_edge(130, 85)
G.add_edge(130, 82)
G.add_edge(130, 83)
G.add_edge(130, 90)
G.add_edge(131, 90)
G.add_edge(131, 83)
G.add_edge(131, 79)
G.add_edge(131, 80)
G.add_edge(131, 91)
G.add_edge(132, 86)
G.add_edge(132, 87)
G.add_edge(132, 88)
G.add_edge(132, 92)
G.add_edge(132, 93)
G.add_edge(133, 93)
G.add_edge(133, 88)
G.add_edge(133, 89)
G.add_edge(133, 90)
G.add_edge(133, 91)
G.add_edge(134, 92)
G.add_edge(134, 93)
G.add_edge(134, 91)
G.add_edge(134, 80)
G.add_edge(134, 81)
G.add_edge(135, 74)
G.add_edge(135, 75)
G.add_edge(135, 86)
G.add_edge(135, 92)
G.add_edge(135, 81)
def scaling(x,i,j,n):
    return x*(n-j)

A = G.adjacency_matrix();

n = G.num_verts()
Munscaled = matrix(QQ, n,n, lambda i,j:-A[i,j]/G.degree(i) if i>=outerSize else 0) + identity_matrix(n)
M=matrix(QQ,n,n,lambda i,j: scaling(Munscaled[i,j],i,j,n) if i>j & i<countOfVertices else Munscaled[i,j])
jednicky = matrix(QQ,n,1,lambda i,j: -1)
soucty = M*jednicky
for i in range (n-outerSize):
    M[i+outerSize,i+outerSize]+=soucty[i+outerSize,0]

vy = matrix(QQ,n,1, lambda i,j:round(sin(i/outerSize*2*pi)*1000) if i<outerSize else 0)
vx = matrix(QQ,n,1, lambda i,j:round(cos(i/outerSize*2*pi)*1000) if i<outerSize else 0)
resX=M.inverse() * vx
resY=M.inverse()*vy
i=0
d=[[resX[i],resY[i]] for i in range(n)]

G.graphplot(save_pos=True)
dd=G.get_pos()

for i in range(n):
    dd[i]=[resX[i,0],resY[i,0]]

G.set_pos(dd)
#removing vertices that were used to make graph 3-connected
ran = range(countOfVertices, n)
G.delete_vertices(ran)
G.show()
