G = Graph()
G.add_edge(0, 1)
G.add_edge(0, 13)
G.add_edge(1, 2)
G.add_edge(2, 3)
G.add_edge(3, 4)
G.add_edge(4, 5)
G.add_edge(4, 16)
G.add_edge(5, 6)
G.add_edge(6, 7)
G.add_edge(6, 15)
G.add_edge(7, 8)
G.add_edge(8, 9)
G.add_edge(9, 10)
G.add_edge(10, 11)
G.add_edge(11, 12)
G.add_edge(11, 14)
G.add_edge(12, 13)
G.add_edge(13, 17)
G.add_edge(14, 15)
G.add_edge(14, 17)
G.add_edge(15, 21)
G.add_edge(16, 17)
G.add_edge(16, 18)
G.add_edge(18, 19)
G.add_edge(18, 22)
G.add_edge(19, 20)
G.add_edge(19, 26)
G.add_edge(20, 21)
G.add_edge(20, 24)
G.add_edge(21, 22)
G.add_edge(22, 23)
G.add_edge(23, 24)
G.add_edge(23, 29)
G.add_edge(24, 25)
G.add_edge(25, 26)
G.add_edge(25, 31)
G.add_edge(26, 27)
G.add_edge(27, 28)
G.add_edge(27, 30)
G.add_edge(28, 29)
G.add_edge(28, 37)
G.add_edge(29, 34)
G.add_edge(30, 31)
G.add_edge(30, 35)
G.add_edge(31, 32)
G.add_edge(32, 33)
G.add_edge(32, 36)
G.add_edge(33, 34)
G.add_edge(33, 40)
G.add_edge(34, 38)
G.add_edge(35, 36)
G.add_edge(35, 37)
G.add_edge(36, 41)
G.add_edge(37, 38)
G.add_edge(38, 39)
G.add_edge(39, 40)
G.add_edge(39, 43)
G.add_edge(40, 41)
G.add_edge(41, 42)
G.add_edge(42, 43)
G.add_edge(42, 46)
G.add_edge(43, 44)
G.add_edge(44, 45)
G.add_edge(44, 47)
G.add_edge(45, 46)
G.add_edge(45, 52)
G.add_edge(46, 47)
G.add_edge(47, 48)
G.add_edge(48, 49)
G.add_edge(48, 55)
G.add_edge(49, 50)
G.add_edge(49, 62)
G.add_edge(50, 51)
G.add_edge(50, 67)
G.add_edge(51, 52)
G.add_edge(51, 57)
G.add_edge(52, 53)
G.add_edge(53, 54)
G.add_edge(53, 56)
G.add_edge(54, 55)
G.add_edge(54, 58)
G.add_edge(55, 60)
G.add_edge(56, 57)
G.add_edge(56, 59)
G.add_edge(57, 66)
G.add_edge(58, 59)
G.add_edge(58, 61)
G.add_edge(59, 65)
G.add_edge(60, 61)
G.add_edge(60, 62)
G.add_edge(61, 64)
G.add_edge(62, 63)
G.add_edge(63, 64)
G.add_edge(63, 67)
G.add_edge(64, 65)
G.add_edge(65, 66)
G.add_edge(66, 67)
outerSize=14
countOfVertices=68
#Now adding vertices for each face, so that the graph is 3-connected.
G.add_edge(68, 11)
G.add_edge(68, 10)
G.add_edge(68, 9)
G.add_edge(68, 8)
G.add_edge(68, 7)
G.add_edge(68, 6)
G.add_edge(68, 14)
G.add_edge(68, 15)
G.add_edge(69, 4)
G.add_edge(69, 3)
G.add_edge(69, 2)
G.add_edge(69, 1)
G.add_edge(69, 0)
G.add_edge(69, 13)
G.add_edge(69, 16)
G.add_edge(69, 17)
G.add_edge(70, 17)
G.add_edge(70, 13)
G.add_edge(70, 12)
G.add_edge(70, 11)
G.add_edge(70, 14)
G.add_edge(71, 16)
G.add_edge(71, 17)
G.add_edge(71, 14)
G.add_edge(71, 15)
G.add_edge(71, 18)
G.add_edge(71, 19)
G.add_edge(71, 20)
G.add_edge(71, 21)
G.add_edge(72, 21)
G.add_edge(72, 15)
G.add_edge(72, 6)
G.add_edge(72, 5)
G.add_edge(72, 4)
G.add_edge(72, 16)
G.add_edge(72, 18)
G.add_edge(72, 22)
G.add_edge(73, 22)
G.add_edge(73, 21)
G.add_edge(73, 20)
G.add_edge(73, 23)
G.add_edge(73, 24)
G.add_edge(74, 24)
G.add_edge(74, 20)
G.add_edge(74, 19)
G.add_edge(74, 25)
G.add_edge(74, 26)
G.add_edge(75, 26)
G.add_edge(75, 19)
G.add_edge(75, 18)
G.add_edge(75, 22)
G.add_edge(75, 23)
G.add_edge(75, 27)
G.add_edge(75, 28)
G.add_edge(75, 29)
G.add_edge(76, 27)
G.add_edge(76, 26)
G.add_edge(76, 25)
G.add_edge(76, 30)
G.add_edge(76, 31)
G.add_edge(77, 31)
G.add_edge(77, 25)
G.add_edge(77, 24)
G.add_edge(77, 23)
G.add_edge(77, 29)
G.add_edge(77, 32)
G.add_edge(77, 33)
G.add_edge(77, 34)
G.add_edge(78, 30)
G.add_edge(78, 31)
G.add_edge(78, 32)
G.add_edge(78, 35)
G.add_edge(78, 36)
G.add_edge(79, 28)
G.add_edge(79, 27)
G.add_edge(79, 30)
G.add_edge(79, 35)
G.add_edge(79, 37)
G.add_edge(80, 34)
G.add_edge(80, 29)
G.add_edge(80, 28)
G.add_edge(80, 37)
G.add_edge(80, 38)
G.add_edge(81, 38)
G.add_edge(81, 34)
G.add_edge(81, 33)
G.add_edge(81, 39)
G.add_edge(81, 40)
G.add_edge(82, 40)
G.add_edge(82, 33)
G.add_edge(82, 32)
G.add_edge(82, 36)
G.add_edge(82, 41)
G.add_edge(83, 41)
G.add_edge(83, 36)
G.add_edge(83, 35)
G.add_edge(83, 37)
G.add_edge(83, 38)
G.add_edge(83, 39)
G.add_edge(83, 42)
G.add_edge(83, 43)
G.add_edge(84, 43)
G.add_edge(84, 42)
G.add_edge(84, 44)
G.add_edge(84, 45)
G.add_edge(84, 46)
G.add_edge(85, 46)
G.add_edge(85, 42)
G.add_edge(85, 41)
G.add_edge(85, 40)
G.add_edge(85, 39)
G.add_edge(85, 43)
G.add_edge(85, 44)
G.add_edge(85, 47)
G.add_edge(86, 47)
G.add_edge(86, 46)
G.add_edge(86, 45)
G.add_edge(86, 48)
G.add_edge(86, 49)
G.add_edge(86, 50)
G.add_edge(86, 51)
G.add_edge(86, 52)
G.add_edge(87, 52)
G.add_edge(87, 45)
G.add_edge(87, 44)
G.add_edge(87, 47)
G.add_edge(87, 48)
G.add_edge(87, 53)
G.add_edge(87, 54)
G.add_edge(87, 55)
G.add_edge(88, 53)
G.add_edge(88, 52)
G.add_edge(88, 51)
G.add_edge(88, 56)
G.add_edge(88, 57)
G.add_edge(89, 54)
G.add_edge(89, 53)
G.add_edge(89, 56)
G.add_edge(89, 58)
G.add_edge(89, 59)
G.add_edge(90, 55)
G.add_edge(90, 54)
G.add_edge(90, 58)
G.add_edge(90, 60)
G.add_edge(90, 61)
G.add_edge(91, 49)
G.add_edge(91, 48)
G.add_edge(91, 55)
G.add_edge(91, 60)
G.add_edge(91, 62)
G.add_edge(92, 62)
G.add_edge(92, 60)
G.add_edge(92, 61)
G.add_edge(92, 63)
G.add_edge(92, 64)
G.add_edge(93, 64)
G.add_edge(93, 61)
G.add_edge(93, 58)
G.add_edge(93, 59)
G.add_edge(93, 65)
G.add_edge(94, 65)
G.add_edge(94, 59)
G.add_edge(94, 56)
G.add_edge(94, 57)
G.add_edge(94, 66)
G.add_edge(95, 63)
G.add_edge(95, 64)
G.add_edge(95, 65)
G.add_edge(95, 66)
G.add_edge(95, 67)
G.add_edge(96, 67)
G.add_edge(96, 66)
G.add_edge(96, 57)
G.add_edge(96, 51)
G.add_edge(96, 50)
G.add_edge(97, 49)
G.add_edge(97, 62)
G.add_edge(97, 63)
G.add_edge(97, 67)
G.add_edge(97, 50)
def scaling(x,i,j,n):
    return x*(n-j)

A = G.adjacency_matrix();

n = G.num_verts()
Munscaled = matrix(QQ, n,n, lambda i,j:-A[i,j]/G.degree(i) if i>=outerSize else 0) + identity_matrix(n)
M=matrix(QQ,n,n,lambda i,j: scaling(Munscaled[i,j],i,j,n) if i>j & i<countOfVertices else Munscaled[i,j])
jednicky = matrix(QQ,n,1,lambda i,j: -1)
soucty = M*jednicky
for i in range (n-outerSize):
    M[i+outerSize,i+outerSize]+=soucty[i+outerSize,0]

vy = matrix(QQ,n,1, lambda i,j:round(sin(i/outerSize*2*pi)*1000) if i<outerSize else 0)
vx = matrix(QQ,n,1, lambda i,j:round(cos(i/outerSize*2*pi)*1000) if i<outerSize else 0)
resX=M.inverse() * vx
resY=M.inverse()*vy
i=0
d=[[resX[i],resY[i]] for i in range(n)]

G.graphplot(save_pos=True)
dd=G.get_pos()

for i in range(n):
    dd[i]=[resX[i,0],resY[i,0]]

G.set_pos(dd)
#removing vertices that were used to make graph 3-connected
ran = range(countOfVertices, n)
G.delete_vertices(ran)
G.show()
