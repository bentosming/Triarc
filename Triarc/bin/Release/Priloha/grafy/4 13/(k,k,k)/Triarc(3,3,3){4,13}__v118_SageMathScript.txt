G = Graph()
G.add_edge(0, 1)
G.add_edge(0, 17)
G.add_edge(1, 2)
G.add_edge(2, 3)
G.add_edge(2, 20)
G.add_edge(3, 4)
G.add_edge(4, 5)
G.add_edge(4, 20)
G.add_edge(5, 6)
G.add_edge(6, 7)
G.add_edge(7, 8)
G.add_edge(8, 9)
G.add_edge(8, 19)
G.add_edge(9, 10)
G.add_edge(10, 11)
G.add_edge(10, 19)
G.add_edge(11, 12)
G.add_edge(12, 13)
G.add_edge(13, 14)
G.add_edge(14, 15)
G.add_edge(14, 18)
G.add_edge(15, 16)
G.add_edge(16, 17)
G.add_edge(16, 18)
G.add_edge(18, 21)
G.add_edge(19, 26)
G.add_edge(20, 31)
G.add_edge(21, 22)
G.add_edge(21, 35)
G.add_edge(22, 23)
G.add_edge(22, 38)
G.add_edge(23, 24)
G.add_edge(23, 39)
G.add_edge(24, 25)
G.add_edge(24, 41)
G.add_edge(25, 26)
G.add_edge(25, 37)
G.add_edge(26, 27)
G.add_edge(27, 28)
G.add_edge(27, 37)
G.add_edge(28, 29)
G.add_edge(28, 45)
G.add_edge(29, 30)
G.add_edge(29, 40)
G.add_edge(30, 31)
G.add_edge(30, 36)
G.add_edge(31, 32)
G.add_edge(32, 33)
G.add_edge(32, 36)
G.add_edge(33, 34)
G.add_edge(33, 40)
G.add_edge(34, 35)
G.add_edge(34, 39)
G.add_edge(35, 38)
G.add_edge(36, 40)
G.add_edge(37, 45)
G.add_edge(38, 39)
G.add_edge(41, 42)
G.add_edge(41, 46)
G.add_edge(42, 43)
G.add_edge(42, 47)
G.add_edge(43, 44)
G.add_edge(43, 48)
G.add_edge(44, 45)
G.add_edge(44, 49)
G.add_edge(46, 47)
G.add_edge(46, 54)
G.add_edge(47, 48)
G.add_edge(48, 54)
G.add_edge(49, 50)
G.add_edge(49, 59)
G.add_edge(50, 51)
G.add_edge(50, 64)
G.add_edge(51, 52)
G.add_edge(51, 56)
G.add_edge(52, 53)
G.add_edge(52, 55)
G.add_edge(53, 54)
G.add_edge(53, 57)
G.add_edge(55, 56)
G.add_edge(55, 57)
G.add_edge(56, 58)
G.add_edge(57, 58)
G.add_edge(58, 63)
G.add_edge(59, 60)
G.add_edge(59, 64)
G.add_edge(60, 61)
G.add_edge(60, 65)
G.add_edge(61, 62)
G.add_edge(61, 66)
G.add_edge(62, 63)
G.add_edge(62, 71)
G.add_edge(63, 67)
G.add_edge(64, 65)
G.add_edge(65, 66)
G.add_edge(66, 71)
G.add_edge(67, 68)
G.add_edge(67, 76)
G.add_edge(68, 69)
G.add_edge(68, 73)
G.add_edge(69, 70)
G.add_edge(69, 72)
G.add_edge(70, 71)
G.add_edge(70, 74)
G.add_edge(72, 73)
G.add_edge(72, 74)
G.add_edge(73, 75)
G.add_edge(74, 75)
G.add_edge(75, 81)
G.add_edge(76, 77)
G.add_edge(76, 86)
G.add_edge(77, 78)
G.add_edge(77, 84)
G.add_edge(78, 79)
G.add_edge(78, 82)
G.add_edge(79, 80)
G.add_edge(79, 83)
G.add_edge(80, 81)
G.add_edge(80, 85)
G.add_edge(81, 92)
G.add_edge(82, 83)
G.add_edge(82, 84)
G.add_edge(83, 85)
G.add_edge(84, 85)
G.add_edge(86, 87)
G.add_edge(86, 97)
G.add_edge(87, 88)
G.add_edge(87, 100)
G.add_edge(88, 89)
G.add_edge(88, 101)
G.add_edge(89, 90)
G.add_edge(89, 109)
G.add_edge(90, 91)
G.add_edge(90, 99)
G.add_edge(91, 92)
G.add_edge(91, 98)
G.add_edge(92, 93)
G.add_edge(93, 94)
G.add_edge(93, 98)
G.add_edge(94, 95)
G.add_edge(94, 99)
G.add_edge(95, 96)
G.add_edge(95, 102)
G.add_edge(96, 97)
G.add_edge(96, 101)
G.add_edge(97, 100)
G.add_edge(98, 99)
G.add_edge(100, 101)
G.add_edge(102, 103)
G.add_edge(102, 113)
G.add_edge(103, 104)
G.add_edge(103, 112)
G.add_edge(104, 105)
G.add_edge(104, 110)
G.add_edge(105, 106)
G.add_edge(105, 111)
G.add_edge(106, 107)
G.add_edge(106, 114)
G.add_edge(107, 108)
G.add_edge(107, 115)
G.add_edge(108, 109)
G.add_edge(108, 117)
G.add_edge(109, 116)
G.add_edge(110, 111)
G.add_edge(110, 112)
G.add_edge(111, 113)
G.add_edge(112, 113)
G.add_edge(114, 115)
G.add_edge(114, 116)
G.add_edge(115, 117)
G.add_edge(116, 117)
outerSize=18
countOfVertices=118
#Now adding vertices for each face, so that the graph is 3-connected.
G.add_edge(118, 16)
G.add_edge(118, 15)
G.add_edge(118, 14)
G.add_edge(118, 18)
G.add_edge(119, 10)
G.add_edge(119, 9)
G.add_edge(119, 8)
G.add_edge(119, 19)
G.add_edge(120, 4)
G.add_edge(120, 3)
G.add_edge(120, 2)
G.add_edge(120, 20)
G.add_edge(121, 18)
G.add_edge(121, 14)
G.add_edge(121, 13)
G.add_edge(121, 12)
G.add_edge(121, 11)
G.add_edge(121, 10)
G.add_edge(121, 19)
G.add_edge(121, 21)
G.add_edge(121, 22)
G.add_edge(121, 23)
G.add_edge(121, 24)
G.add_edge(121, 25)
G.add_edge(121, 26)
G.add_edge(122, 26)
G.add_edge(122, 19)
G.add_edge(122, 8)
G.add_edge(122, 7)
G.add_edge(122, 6)
G.add_edge(122, 5)
G.add_edge(122, 4)
G.add_edge(122, 20)
G.add_edge(122, 27)
G.add_edge(122, 28)
G.add_edge(122, 29)
G.add_edge(122, 30)
G.add_edge(122, 31)
G.add_edge(123, 31)
G.add_edge(123, 20)
G.add_edge(123, 2)
G.add_edge(123, 1)
G.add_edge(123, 0)
G.add_edge(123, 17)
G.add_edge(123, 16)
G.add_edge(123, 18)
G.add_edge(123, 21)
G.add_edge(123, 32)
G.add_edge(123, 33)
G.add_edge(123, 34)
G.add_edge(123, 35)
G.add_edge(124, 32)
G.add_edge(124, 31)
G.add_edge(124, 30)
G.add_edge(124, 36)
G.add_edge(125, 27)
G.add_edge(125, 26)
G.add_edge(125, 25)
G.add_edge(125, 37)
G.add_edge(126, 22)
G.add_edge(126, 21)
G.add_edge(126, 35)
G.add_edge(126, 38)
G.add_edge(127, 38)
G.add_edge(127, 35)
G.add_edge(127, 34)
G.add_edge(127, 39)
G.add_edge(128, 23)
G.add_edge(128, 22)
G.add_edge(128, 38)
G.add_edge(128, 39)
G.add_edge(129, 36)
G.add_edge(129, 30)
G.add_edge(129, 29)
G.add_edge(129, 40)
G.add_edge(130, 33)
G.add_edge(130, 32)
G.add_edge(130, 36)
G.add_edge(130, 40)
G.add_edge(131, 24)
G.add_edge(131, 23)
G.add_edge(131, 39)
G.add_edge(131, 34)
G.add_edge(131, 33)
G.add_edge(131, 40)
G.add_edge(131, 29)
G.add_edge(131, 28)
G.add_edge(131, 41)
G.add_edge(131, 42)
G.add_edge(131, 43)
G.add_edge(131, 44)
G.add_edge(131, 45)
G.add_edge(132, 45)
G.add_edge(132, 28)
G.add_edge(132, 27)
G.add_edge(132, 37)
G.add_edge(133, 41)
G.add_edge(133, 42)
G.add_edge(133, 46)
G.add_edge(133, 47)
G.add_edge(134, 43)
G.add_edge(134, 42)
G.add_edge(134, 47)
G.add_edge(134, 48)
G.add_edge(135, 44)
G.add_edge(135, 45)
G.add_edge(135, 37)
G.add_edge(135, 25)
G.add_edge(135, 24)
G.add_edge(135, 41)
G.add_edge(135, 46)
G.add_edge(135, 49)
G.add_edge(135, 50)
G.add_edge(135, 51)
G.add_edge(135, 52)
G.add_edge(135, 53)
G.add_edge(135, 54)
G.add_edge(136, 48)
G.add_edge(136, 47)
G.add_edge(136, 46)
G.add_edge(136, 54)
G.add_edge(137, 52)
G.add_edge(137, 51)
G.add_edge(137, 55)
G.add_edge(137, 56)
G.add_edge(138, 53)
G.add_edge(138, 52)
G.add_edge(138, 55)
G.add_edge(138, 57)
G.add_edge(139, 57)
G.add_edge(139, 55)
G.add_edge(139, 56)
G.add_edge(139, 58)
G.add_edge(140, 49)
G.add_edge(140, 44)
G.add_edge(140, 43)
G.add_edge(140, 48)
G.add_edge(140, 54)
G.add_edge(140, 53)
G.add_edge(140, 57)
G.add_edge(140, 58)
G.add_edge(140, 59)
G.add_edge(140, 60)
G.add_edge(140, 61)
G.add_edge(140, 62)
G.add_edge(140, 63)
G.add_edge(141, 50)
G.add_edge(141, 49)
G.add_edge(141, 59)
G.add_edge(141, 64)
G.add_edge(142, 64)
G.add_edge(142, 59)
G.add_edge(142, 60)
G.add_edge(142, 65)
G.add_edge(143, 65)
G.add_edge(143, 60)
G.add_edge(143, 61)
G.add_edge(143, 66)
G.add_edge(144, 63)
G.add_edge(144, 58)
G.add_edge(144, 56)
G.add_edge(144, 51)
G.add_edge(144, 50)
G.add_edge(144, 64)
G.add_edge(144, 65)
G.add_edge(144, 66)
G.add_edge(144, 67)
G.add_edge(144, 68)
G.add_edge(144, 69)
G.add_edge(144, 70)
G.add_edge(144, 71)
G.add_edge(145, 62)
G.add_edge(145, 61)
G.add_edge(145, 66)
G.add_edge(145, 71)
G.add_edge(146, 69)
G.add_edge(146, 68)
G.add_edge(146, 72)
G.add_edge(146, 73)
G.add_edge(147, 70)
G.add_edge(147, 69)
G.add_edge(147, 72)
G.add_edge(147, 74)
G.add_edge(148, 74)
G.add_edge(148, 72)
G.add_edge(148, 73)
G.add_edge(148, 75)
G.add_edge(149, 67)
G.add_edge(149, 63)
G.add_edge(149, 62)
G.add_edge(149, 71)
G.add_edge(149, 70)
G.add_edge(149, 74)
G.add_edge(149, 75)
G.add_edge(149, 76)
G.add_edge(149, 77)
G.add_edge(149, 78)
G.add_edge(149, 79)
G.add_edge(149, 80)
G.add_edge(149, 81)
G.add_edge(150, 78)
G.add_edge(150, 79)
G.add_edge(150, 82)
G.add_edge(150, 83)
G.add_edge(151, 77)
G.add_edge(151, 78)
G.add_edge(151, 82)
G.add_edge(151, 84)
G.add_edge(152, 83)
G.add_edge(152, 79)
G.add_edge(152, 80)
G.add_edge(152, 85)
G.add_edge(153, 84)
G.add_edge(153, 82)
G.add_edge(153, 83)
G.add_edge(153, 85)
G.add_edge(154, 76)
G.add_edge(154, 77)
G.add_edge(154, 84)
G.add_edge(154, 85)
G.add_edge(154, 80)
G.add_edge(154, 81)
G.add_edge(154, 86)
G.add_edge(154, 87)
G.add_edge(154, 88)
G.add_edge(154, 89)
G.add_edge(154, 90)
G.add_edge(154, 91)
G.add_edge(154, 92)
G.add_edge(155, 92)
G.add_edge(155, 81)
G.add_edge(155, 75)
G.add_edge(155, 73)
G.add_edge(155, 68)
G.add_edge(155, 67)
G.add_edge(155, 76)
G.add_edge(155, 86)
G.add_edge(155, 93)
G.add_edge(155, 94)
G.add_edge(155, 95)
G.add_edge(155, 96)
G.add_edge(155, 97)
G.add_edge(156, 93)
G.add_edge(156, 92)
G.add_edge(156, 91)
G.add_edge(156, 98)
G.add_edge(157, 94)
G.add_edge(157, 93)
G.add_edge(157, 98)
G.add_edge(157, 99)
G.add_edge(158, 99)
G.add_edge(158, 98)
G.add_edge(158, 91)
G.add_edge(158, 90)
G.add_edge(159, 87)
G.add_edge(159, 86)
G.add_edge(159, 97)
G.add_edge(159, 100)
G.add_edge(160, 100)
G.add_edge(160, 97)
G.add_edge(160, 96)
G.add_edge(160, 101)
G.add_edge(161, 88)
G.add_edge(161, 87)
G.add_edge(161, 100)
G.add_edge(161, 101)
G.add_edge(162, 95)
G.add_edge(162, 94)
G.add_edge(162, 99)
G.add_edge(162, 90)
G.add_edge(162, 89)
G.add_edge(162, 102)
G.add_edge(162, 103)
G.add_edge(162, 104)
G.add_edge(162, 105)
G.add_edge(162, 106)
G.add_edge(162, 107)
G.add_edge(162, 108)
G.add_edge(162, 109)
G.add_edge(163, 104)
G.add_edge(163, 105)
G.add_edge(163, 110)
G.add_edge(163, 111)
G.add_edge(164, 110)
G.add_edge(164, 104)
G.add_edge(164, 103)
G.add_edge(164, 112)
G.add_edge(165, 112)
G.add_edge(165, 110)
G.add_edge(165, 111)
G.add_edge(165, 113)
G.add_edge(166, 102)
G.add_edge(166, 103)
G.add_edge(166, 112)
G.add_edge(166, 113)
G.add_edge(167, 106)
G.add_edge(167, 107)
G.add_edge(167, 114)
G.add_edge(167, 115)
G.add_edge(168, 109)
G.add_edge(168, 89)
G.add_edge(168, 88)
G.add_edge(168, 101)
G.add_edge(168, 96)
G.add_edge(168, 95)
G.add_edge(168, 102)
G.add_edge(168, 113)
G.add_edge(168, 111)
G.add_edge(168, 105)
G.add_edge(168, 106)
G.add_edge(168, 114)
G.add_edge(168, 116)
G.add_edge(169, 115)
G.add_edge(169, 114)
G.add_edge(169, 116)
G.add_edge(169, 117)
G.add_edge(170, 117)
G.add_edge(170, 116)
G.add_edge(170, 109)
G.add_edge(170, 108)
G.add_edge(171, 107)
G.add_edge(171, 115)
G.add_edge(171, 117)
G.add_edge(171, 108)
def scaling(x,i,j,n):
    return x*(n-j)

A = G.adjacency_matrix();

n = G.num_verts()
Munscaled = matrix(QQ, n,n, lambda i,j:-A[i,j]/G.degree(i) if i>=outerSize else 0) + identity_matrix(n)
M=matrix(QQ,n,n,lambda i,j: scaling(Munscaled[i,j],i,j,n) if i>j & i<countOfVertices else Munscaled[i,j])
jednicky = matrix(QQ,n,1,lambda i,j: -1)
soucty = M*jednicky
for i in range (n-outerSize):
    M[i+outerSize,i+outerSize]+=soucty[i+outerSize,0]

vy = matrix(QQ,n,1, lambda i,j:round(sin(i/outerSize*2*pi)*1000) if i<outerSize else 0)
vx = matrix(QQ,n,1, lambda i,j:round(cos(i/outerSize*2*pi)*1000) if i<outerSize else 0)
resX=M.inverse() * vx
resY=M.inverse()*vy
i=0
d=[[resX[i],resY[i]] for i in range(n)]

G.graphplot(save_pos=True)
dd=G.get_pos()

for i in range(n):
    dd[i]=[resX[i,0],resY[i,0]]

G.set_pos(dd)
#removing vertices that were used to make graph 3-connected
ran = range(countOfVertices, n)
G.delete_vertices(ran)
G.show()
