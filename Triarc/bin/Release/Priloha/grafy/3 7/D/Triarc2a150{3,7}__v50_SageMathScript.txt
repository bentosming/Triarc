G = Graph()
G.add_edge(0, 1)
G.add_edge(0, 17)
G.add_edge(1, 2)
G.add_edge(2, 3)
G.add_edge(3, 4)
G.add_edge(4, 5)
G.add_edge(4, 19)
G.add_edge(5, 6)
G.add_edge(6, 7)
G.add_edge(6, 26)
G.add_edge(7, 8)
G.add_edge(8, 9)
G.add_edge(8, 18)
G.add_edge(9, 10)
G.add_edge(10, 11)
G.add_edge(11, 12)
G.add_edge(12, 13)
G.add_edge(13, 14)
G.add_edge(13, 18)
G.add_edge(14, 15)
G.add_edge(15, 16)
G.add_edge(15, 22)
G.add_edge(16, 17)
G.add_edge(17, 19)
G.add_edge(18, 24)
G.add_edge(19, 20)
G.add_edge(20, 21)
G.add_edge(20, 27)
G.add_edge(21, 22)
G.add_edge(21, 34)
G.add_edge(22, 23)
G.add_edge(23, 24)
G.add_edge(23, 36)
G.add_edge(24, 25)
G.add_edge(25, 26)
G.add_edge(25, 31)
G.add_edge(26, 27)
G.add_edge(27, 28)
G.add_edge(28, 29)
G.add_edge(28, 32)
G.add_edge(29, 30)
G.add_edge(29, 32)
G.add_edge(30, 31)
G.add_edge(30, 38)
G.add_edge(31, 39)
G.add_edge(32, 33)
G.add_edge(33, 34)
G.add_edge(33, 35)
G.add_edge(34, 35)
G.add_edge(35, 37)
G.add_edge(36, 37)
G.add_edge(36, 40)
G.add_edge(37, 38)
G.add_edge(38, 41)
G.add_edge(39, 40)
G.add_edge(39, 44)
G.add_edge(40, 43)
G.add_edge(41, 42)
G.add_edge(41, 45)
G.add_edge(42, 43)
G.add_edge(42, 45)
G.add_edge(43, 48)
G.add_edge(44, 45)
G.add_edge(44, 46)
G.add_edge(46, 47)
G.add_edge(46, 49)
G.add_edge(47, 48)
G.add_edge(47, 49)
G.add_edge(48, 49)
outerSize=18
countOfVertices=50
#Now adding vertices for each face, so that the graph is 3-connected.
G.add_edge(50, 13)
G.add_edge(50, 12)
G.add_edge(50, 11)
G.add_edge(50, 10)
G.add_edge(50, 9)
G.add_edge(50, 8)
G.add_edge(50, 18)
G.add_edge(51, 4)
G.add_edge(51, 3)
G.add_edge(51, 2)
G.add_edge(51, 1)
G.add_edge(51, 0)
G.add_edge(51, 17)
G.add_edge(51, 19)
G.add_edge(52, 19)
G.add_edge(52, 17)
G.add_edge(52, 16)
G.add_edge(52, 15)
G.add_edge(52, 20)
G.add_edge(52, 21)
G.add_edge(52, 22)
G.add_edge(53, 22)
G.add_edge(53, 15)
G.add_edge(53, 14)
G.add_edge(53, 13)
G.add_edge(53, 18)
G.add_edge(53, 23)
G.add_edge(53, 24)
G.add_edge(54, 24)
G.add_edge(54, 18)
G.add_edge(54, 8)
G.add_edge(54, 7)
G.add_edge(54, 6)
G.add_edge(54, 25)
G.add_edge(54, 26)
G.add_edge(55, 26)
G.add_edge(55, 6)
G.add_edge(55, 5)
G.add_edge(55, 4)
G.add_edge(55, 19)
G.add_edge(55, 20)
G.add_edge(55, 27)
G.add_edge(56, 27)
G.add_edge(56, 26)
G.add_edge(56, 25)
G.add_edge(56, 28)
G.add_edge(56, 29)
G.add_edge(56, 30)
G.add_edge(56, 31)
G.add_edge(57, 28)
G.add_edge(57, 29)
G.add_edge(57, 32)
G.add_edge(58, 32)
G.add_edge(58, 28)
G.add_edge(58, 27)
G.add_edge(58, 20)
G.add_edge(58, 21)
G.add_edge(58, 33)
G.add_edge(58, 34)
G.add_edge(59, 34)
G.add_edge(59, 33)
G.add_edge(59, 35)
G.add_edge(60, 23)
G.add_edge(60, 22)
G.add_edge(60, 21)
G.add_edge(60, 34)
G.add_edge(60, 35)
G.add_edge(60, 36)
G.add_edge(60, 37)
G.add_edge(61, 37)
G.add_edge(61, 35)
G.add_edge(61, 33)
G.add_edge(61, 32)
G.add_edge(61, 29)
G.add_edge(61, 30)
G.add_edge(61, 38)
G.add_edge(62, 31)
G.add_edge(62, 25)
G.add_edge(62, 24)
G.add_edge(62, 23)
G.add_edge(62, 36)
G.add_edge(62, 39)
G.add_edge(62, 40)
G.add_edge(63, 38)
G.add_edge(63, 37)
G.add_edge(63, 36)
G.add_edge(63, 40)
G.add_edge(63, 41)
G.add_edge(63, 42)
G.add_edge(63, 43)
G.add_edge(64, 39)
G.add_edge(64, 31)
G.add_edge(64, 30)
G.add_edge(64, 38)
G.add_edge(64, 41)
G.add_edge(64, 44)
G.add_edge(64, 45)
G.add_edge(65, 45)
G.add_edge(65, 41)
G.add_edge(65, 42)
G.add_edge(66, 44)
G.add_edge(66, 45)
G.add_edge(66, 42)
G.add_edge(66, 43)
G.add_edge(66, 46)
G.add_edge(66, 47)
G.add_edge(66, 48)
G.add_edge(67, 48)
G.add_edge(67, 43)
G.add_edge(67, 40)
G.add_edge(67, 39)
G.add_edge(67, 44)
G.add_edge(67, 46)
G.add_edge(67, 49)
G.add_edge(68, 49)
G.add_edge(68, 48)
G.add_edge(68, 47)
G.add_edge(69, 46)
G.add_edge(69, 49)
G.add_edge(69, 47)
def scaling(x,i,j,n):
    return x*(n-j)

A = G.adjacency_matrix();

n = G.num_verts()
Munscaled = matrix(QQ, n,n, lambda i,j:-A[i,j]/G.degree(i) if i>=outerSize else 0) + identity_matrix(n)
M=matrix(QQ,n,n,lambda i,j: scaling(Munscaled[i,j],i,j,n) if i>j & i<countOfVertices else Munscaled[i,j])
jednicky = matrix(QQ,n,1,lambda i,j: -1)
soucty = M*jednicky
for i in range (n-outerSize):
    M[i+outerSize,i+outerSize]+=soucty[i+outerSize,0]

vy = matrix(QQ,n,1, lambda i,j:round(sin(i/outerSize*2*pi)*1000) if i<outerSize else 0)
vx = matrix(QQ,n,1, lambda i,j:round(cos(i/outerSize*2*pi)*1000) if i<outerSize else 0)
resX=M.inverse() * vx
resY=M.inverse()*vy
i=0
d=[[resX[i],resY[i]] for i in range(n)]

G.graphplot(save_pos=True)
dd=G.get_pos()

for i in range(n):
    dd[i]=[resX[i,0],resY[i,0]]

G.set_pos(dd)
#removing vertices that were used to make graph 3-connected
ran = range(countOfVertices, n)
G.delete_vertices(ran)
G.show()
