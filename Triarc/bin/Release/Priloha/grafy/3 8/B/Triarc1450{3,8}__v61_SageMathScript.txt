G = Graph()
G.add_edge(0, 1)
G.add_edge(0, 12)
G.add_edge(1, 2)
G.add_edge(2, 3)
G.add_edge(3, 4)
G.add_edge(4, 5)
G.add_edge(4, 14)
G.add_edge(5, 6)
G.add_edge(6, 7)
G.add_edge(6, 15)
G.add_edge(7, 8)
G.add_edge(8, 9)
G.add_edge(9, 10)
G.add_edge(10, 11)
G.add_edge(10, 17)
G.add_edge(11, 12)
G.add_edge(12, 13)
G.add_edge(13, 14)
G.add_edge(13, 20)
G.add_edge(14, 21)
G.add_edge(15, 16)
G.add_edge(15, 23)
G.add_edge(16, 17)
G.add_edge(16, 18)
G.add_edge(17, 18)
G.add_edge(18, 19)
G.add_edge(19, 20)
G.add_edge(19, 26)
G.add_edge(20, 26)
G.add_edge(21, 22)
G.add_edge(21, 27)
G.add_edge(22, 23)
G.add_edge(22, 24)
G.add_edge(23, 24)
G.add_edge(24, 25)
G.add_edge(25, 26)
G.add_edge(25, 30)
G.add_edge(27, 28)
G.add_edge(27, 30)
G.add_edge(28, 29)
G.add_edge(28, 31)
G.add_edge(29, 30)
G.add_edge(29, 36)
G.add_edge(31, 32)
G.add_edge(31, 38)
G.add_edge(32, 33)
G.add_edge(32, 39)
G.add_edge(33, 34)
G.add_edge(33, 39)
G.add_edge(34, 35)
G.add_edge(34, 39)
G.add_edge(35, 36)
G.add_edge(35, 41)
G.add_edge(36, 37)
G.add_edge(37, 38)
G.add_edge(37, 46)
G.add_edge(38, 40)
G.add_edge(40, 41)
G.add_edge(40, 42)
G.add_edge(41, 42)
G.add_edge(42, 43)
G.add_edge(43, 44)
G.add_edge(43, 47)
G.add_edge(44, 45)
G.add_edge(44, 48)
G.add_edge(45, 46)
G.add_edge(45, 48)
G.add_edge(46, 47)
G.add_edge(47, 52)
G.add_edge(48, 49)
G.add_edge(49, 50)
G.add_edge(49, 54)
G.add_edge(50, 51)
G.add_edge(50, 55)
G.add_edge(51, 52)
G.add_edge(51, 55)
G.add_edge(52, 53)
G.add_edge(53, 54)
G.add_edge(53, 56)
G.add_edge(54, 56)
G.add_edge(55, 57)
G.add_edge(56, 59)
G.add_edge(57, 58)
G.add_edge(57, 60)
G.add_edge(58, 59)
G.add_edge(58, 60)
G.add_edge(59, 60)
outerSize=13
countOfVertices=61
#Now adding vertices for each face, so that the graph is 3-connected.
G.add_edge(61, 12)
G.add_edge(61, 0)
G.add_edge(61, 1)
G.add_edge(61, 2)
G.add_edge(61, 3)
G.add_edge(61, 4)
G.add_edge(61, 13)
G.add_edge(61, 14)
G.add_edge(62, 6)
G.add_edge(62, 7)
G.add_edge(62, 8)
G.add_edge(62, 9)
G.add_edge(62, 10)
G.add_edge(62, 15)
G.add_edge(62, 16)
G.add_edge(62, 17)
G.add_edge(63, 17)
G.add_edge(63, 10)
G.add_edge(63, 11)
G.add_edge(63, 12)
G.add_edge(63, 13)
G.add_edge(63, 18)
G.add_edge(63, 19)
G.add_edge(63, 20)
G.add_edge(64, 16)
G.add_edge(64, 17)
G.add_edge(64, 18)
G.add_edge(65, 14)
G.add_edge(65, 4)
G.add_edge(65, 5)
G.add_edge(65, 6)
G.add_edge(65, 15)
G.add_edge(65, 21)
G.add_edge(65, 22)
G.add_edge(65, 23)
G.add_edge(66, 23)
G.add_edge(66, 15)
G.add_edge(66, 16)
G.add_edge(66, 18)
G.add_edge(66, 19)
G.add_edge(66, 24)
G.add_edge(66, 25)
G.add_edge(66, 26)
G.add_edge(67, 22)
G.add_edge(67, 23)
G.add_edge(67, 24)
G.add_edge(68, 26)
G.add_edge(68, 19)
G.add_edge(68, 20)
G.add_edge(69, 21)
G.add_edge(69, 22)
G.add_edge(69, 24)
G.add_edge(69, 25)
G.add_edge(69, 27)
G.add_edge(69, 28)
G.add_edge(69, 29)
G.add_edge(69, 30)
G.add_edge(70, 30)
G.add_edge(70, 25)
G.add_edge(70, 26)
G.add_edge(70, 20)
G.add_edge(70, 13)
G.add_edge(70, 14)
G.add_edge(70, 21)
G.add_edge(70, 27)
G.add_edge(71, 28)
G.add_edge(71, 29)
G.add_edge(71, 31)
G.add_edge(71, 32)
G.add_edge(71, 33)
G.add_edge(71, 34)
G.add_edge(71, 35)
G.add_edge(71, 36)
G.add_edge(72, 36)
G.add_edge(72, 29)
G.add_edge(72, 30)
G.add_edge(72, 27)
G.add_edge(72, 28)
G.add_edge(72, 31)
G.add_edge(72, 37)
G.add_edge(72, 38)
G.add_edge(73, 33)
G.add_edge(73, 34)
G.add_edge(73, 39)
G.add_edge(74, 32)
G.add_edge(74, 33)
G.add_edge(74, 39)
G.add_edge(75, 38)
G.add_edge(75, 31)
G.add_edge(75, 32)
G.add_edge(75, 39)
G.add_edge(75, 34)
G.add_edge(75, 35)
G.add_edge(75, 40)
G.add_edge(75, 41)
G.add_edge(76, 40)
G.add_edge(76, 41)
G.add_edge(76, 42)
G.add_edge(77, 42)
G.add_edge(77, 40)
G.add_edge(77, 38)
G.add_edge(77, 37)
G.add_edge(77, 43)
G.add_edge(77, 44)
G.add_edge(77, 45)
G.add_edge(77, 46)
G.add_edge(78, 43)
G.add_edge(78, 42)
G.add_edge(78, 41)
G.add_edge(78, 35)
G.add_edge(78, 36)
G.add_edge(78, 37)
G.add_edge(78, 46)
G.add_edge(78, 47)
G.add_edge(79, 44)
G.add_edge(79, 45)
G.add_edge(79, 48)
G.add_edge(80, 48)
G.add_edge(80, 45)
G.add_edge(80, 46)
G.add_edge(80, 47)
G.add_edge(80, 49)
G.add_edge(80, 50)
G.add_edge(80, 51)
G.add_edge(80, 52)
G.add_edge(81, 52)
G.add_edge(81, 47)
G.add_edge(81, 43)
G.add_edge(81, 44)
G.add_edge(81, 48)
G.add_edge(81, 49)
G.add_edge(81, 53)
G.add_edge(81, 54)
G.add_edge(82, 50)
G.add_edge(82, 51)
G.add_edge(82, 55)
G.add_edge(83, 53)
G.add_edge(83, 54)
G.add_edge(83, 56)
G.add_edge(84, 55)
G.add_edge(84, 51)
G.add_edge(84, 52)
G.add_edge(84, 53)
G.add_edge(84, 56)
G.add_edge(84, 57)
G.add_edge(84, 58)
G.add_edge(84, 59)
G.add_edge(85, 59)
G.add_edge(85, 56)
G.add_edge(85, 54)
G.add_edge(85, 49)
G.add_edge(85, 50)
G.add_edge(85, 55)
G.add_edge(85, 57)
G.add_edge(85, 60)
G.add_edge(86, 58)
G.add_edge(86, 59)
G.add_edge(86, 60)
G.add_edge(87, 57)
G.add_edge(87, 58)
G.add_edge(87, 60)
def scaling(x,i,j,n):
    return x*(n-j)

A = G.adjacency_matrix();

n = G.num_verts()
Munscaled = matrix(QQ, n,n, lambda i,j:-A[i,j]/G.degree(i) if i>=outerSize else 0) + identity_matrix(n)
M=matrix(QQ,n,n,lambda i,j: scaling(Munscaled[i,j],i,j,n) if i>j & i<countOfVertices else Munscaled[i,j])
jednicky = matrix(QQ,n,1,lambda i,j: -1)
soucty = M*jednicky
for i in range (n-outerSize):
    M[i+outerSize,i+outerSize]+=soucty[i+outerSize,0]

vy = matrix(QQ,n,1, lambda i,j:round(sin(i/outerSize*2*pi)*1000) if i<outerSize else 0)
vx = matrix(QQ,n,1, lambda i,j:round(cos(i/outerSize*2*pi)*1000) if i<outerSize else 0)
resX=M.inverse() * vx
resY=M.inverse()*vy
i=0
d=[[resX[i],resY[i]] for i in range(n)]

G.graphplot(save_pos=True)
dd=G.get_pos()

for i in range(n):
    dd[i]=[resX[i,0],resY[i,0]]

G.set_pos(dd)
#removing vertices that were used to make graph 3-connected
ran = range(countOfVertices, n)
G.delete_vertices(ran)
G.show()
