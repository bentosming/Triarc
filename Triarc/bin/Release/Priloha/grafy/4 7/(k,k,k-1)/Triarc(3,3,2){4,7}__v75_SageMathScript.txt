G = Graph()
G.add_edge(0, 1)
G.add_edge(0, 15)
G.add_edge(1, 2)
G.add_edge(2, 3)
G.add_edge(2, 20)
G.add_edge(3, 4)
G.add_edge(4, 5)
G.add_edge(4, 16)
G.add_edge(5, 6)
G.add_edge(6, 7)
G.add_edge(7, 8)
G.add_edge(8, 9)
G.add_edge(8, 17)
G.add_edge(9, 10)
G.add_edge(10, 11)
G.add_edge(10, 18)
G.add_edge(11, 12)
G.add_edge(12, 13)
G.add_edge(13, 14)
G.add_edge(14, 15)
G.add_edge(14, 19)
G.add_edge(16, 17)
G.add_edge(16, 24)
G.add_edge(17, 21)
G.add_edge(18, 19)
G.add_edge(18, 22)
G.add_edge(19, 20)
G.add_edge(20, 23)
G.add_edge(21, 22)
G.add_edge(21, 27)
G.add_edge(22, 25)
G.add_edge(23, 24)
G.add_edge(23, 26)
G.add_edge(24, 28)
G.add_edge(25, 26)
G.add_edge(25, 27)
G.add_edge(26, 32)
G.add_edge(27, 29)
G.add_edge(28, 29)
G.add_edge(28, 34)
G.add_edge(29, 30)
G.add_edge(30, 31)
G.add_edge(30, 38)
G.add_edge(31, 32)
G.add_edge(31, 35)
G.add_edge(32, 33)
G.add_edge(33, 34)
G.add_edge(33, 35)
G.add_edge(34, 36)
G.add_edge(35, 39)
G.add_edge(36, 37)
G.add_edge(36, 41)
G.add_edge(37, 38)
G.add_edge(37, 44)
G.add_edge(38, 42)
G.add_edge(39, 40)
G.add_edge(39, 43)
G.add_edge(40, 41)
G.add_edge(40, 48)
G.add_edge(41, 44)
G.add_edge(42, 43)
G.add_edge(42, 44)
G.add_edge(43, 45)
G.add_edge(45, 46)
G.add_edge(45, 48)
G.add_edge(46, 47)
G.add_edge(46, 49)
G.add_edge(47, 48)
G.add_edge(47, 53)
G.add_edge(49, 50)
G.add_edge(49, 54)
G.add_edge(50, 51)
G.add_edge(50, 58)
G.add_edge(51, 52)
G.add_edge(51, 59)
G.add_edge(52, 53)
G.add_edge(52, 55)
G.add_edge(53, 54)
G.add_edge(54, 55)
G.add_edge(55, 56)
G.add_edge(56, 57)
G.add_edge(56, 61)
G.add_edge(57, 58)
G.add_edge(57, 66)
G.add_edge(58, 62)
G.add_edge(59, 60)
G.add_edge(59, 64)
G.add_edge(60, 61)
G.add_edge(60, 65)
G.add_edge(61, 72)
G.add_edge(62, 63)
G.add_edge(62, 66)
G.add_edge(63, 64)
G.add_edge(63, 67)
G.add_edge(64, 65)
G.add_edge(65, 67)
G.add_edge(66, 68)
G.add_edge(67, 70)
G.add_edge(68, 69)
G.add_edge(68, 73)
G.add_edge(69, 70)
G.add_edge(69, 74)
G.add_edge(70, 71)
G.add_edge(71, 72)
G.add_edge(71, 74)
G.add_edge(72, 73)
G.add_edge(73, 74)
outerSize=16
countOfVertices=75
#Now adding vertices for each face, so that the graph is 3-connected.
G.add_edge(75, 4)
G.add_edge(75, 5)
G.add_edge(75, 6)
G.add_edge(75, 7)
G.add_edge(75, 8)
G.add_edge(75, 16)
G.add_edge(75, 17)
G.add_edge(76, 10)
G.add_edge(76, 11)
G.add_edge(76, 12)
G.add_edge(76, 13)
G.add_edge(76, 14)
G.add_edge(76, 18)
G.add_edge(76, 19)
G.add_edge(77, 19)
G.add_edge(77, 14)
G.add_edge(77, 15)
G.add_edge(77, 0)
G.add_edge(77, 1)
G.add_edge(77, 2)
G.add_edge(77, 20)
G.add_edge(78, 17)
G.add_edge(78, 8)
G.add_edge(78, 9)
G.add_edge(78, 10)
G.add_edge(78, 18)
G.add_edge(78, 21)
G.add_edge(78, 22)
G.add_edge(79, 20)
G.add_edge(79, 2)
G.add_edge(79, 3)
G.add_edge(79, 4)
G.add_edge(79, 16)
G.add_edge(79, 23)
G.add_edge(79, 24)
G.add_edge(80, 22)
G.add_edge(80, 18)
G.add_edge(80, 19)
G.add_edge(80, 20)
G.add_edge(80, 23)
G.add_edge(80, 25)
G.add_edge(80, 26)
G.add_edge(81, 21)
G.add_edge(81, 22)
G.add_edge(81, 25)
G.add_edge(81, 27)
G.add_edge(82, 24)
G.add_edge(82, 16)
G.add_edge(82, 17)
G.add_edge(82, 21)
G.add_edge(82, 27)
G.add_edge(82, 28)
G.add_edge(82, 29)
G.add_edge(83, 29)
G.add_edge(83, 27)
G.add_edge(83, 25)
G.add_edge(83, 26)
G.add_edge(83, 30)
G.add_edge(83, 31)
G.add_edge(83, 32)
G.add_edge(84, 32)
G.add_edge(84, 26)
G.add_edge(84, 23)
G.add_edge(84, 24)
G.add_edge(84, 28)
G.add_edge(84, 33)
G.add_edge(84, 34)
G.add_edge(85, 31)
G.add_edge(85, 32)
G.add_edge(85, 33)
G.add_edge(85, 35)
G.add_edge(86, 34)
G.add_edge(86, 28)
G.add_edge(86, 29)
G.add_edge(86, 30)
G.add_edge(86, 36)
G.add_edge(86, 37)
G.add_edge(86, 38)
G.add_edge(87, 35)
G.add_edge(87, 33)
G.add_edge(87, 34)
G.add_edge(87, 36)
G.add_edge(87, 39)
G.add_edge(87, 40)
G.add_edge(87, 41)
G.add_edge(88, 38)
G.add_edge(88, 30)
G.add_edge(88, 31)
G.add_edge(88, 35)
G.add_edge(88, 39)
G.add_edge(88, 42)
G.add_edge(88, 43)
G.add_edge(89, 37)
G.add_edge(89, 38)
G.add_edge(89, 42)
G.add_edge(89, 44)
G.add_edge(90, 41)
G.add_edge(90, 36)
G.add_edge(90, 37)
G.add_edge(90, 44)
G.add_edge(91, 43)
G.add_edge(91, 39)
G.add_edge(91, 40)
G.add_edge(91, 45)
G.add_edge(91, 46)
G.add_edge(91, 47)
G.add_edge(91, 48)
G.add_edge(92, 48)
G.add_edge(92, 40)
G.add_edge(92, 41)
G.add_edge(92, 44)
G.add_edge(92, 42)
G.add_edge(92, 43)
G.add_edge(92, 45)
G.add_edge(93, 46)
G.add_edge(93, 47)
G.add_edge(93, 49)
G.add_edge(93, 50)
G.add_edge(93, 51)
G.add_edge(93, 52)
G.add_edge(93, 53)
G.add_edge(94, 53)
G.add_edge(94, 47)
G.add_edge(94, 48)
G.add_edge(94, 45)
G.add_edge(94, 46)
G.add_edge(94, 49)
G.add_edge(94, 54)
G.add_edge(95, 52)
G.add_edge(95, 53)
G.add_edge(95, 54)
G.add_edge(95, 55)
G.add_edge(96, 55)
G.add_edge(96, 54)
G.add_edge(96, 49)
G.add_edge(96, 50)
G.add_edge(96, 56)
G.add_edge(96, 57)
G.add_edge(96, 58)
G.add_edge(97, 51)
G.add_edge(97, 52)
G.add_edge(97, 55)
G.add_edge(97, 56)
G.add_edge(97, 59)
G.add_edge(97, 60)
G.add_edge(97, 61)
G.add_edge(98, 58)
G.add_edge(98, 50)
G.add_edge(98, 51)
G.add_edge(98, 59)
G.add_edge(98, 62)
G.add_edge(98, 63)
G.add_edge(98, 64)
G.add_edge(99, 64)
G.add_edge(99, 59)
G.add_edge(99, 60)
G.add_edge(99, 65)
G.add_edge(100, 57)
G.add_edge(100, 58)
G.add_edge(100, 62)
G.add_edge(100, 66)
G.add_edge(101, 63)
G.add_edge(101, 64)
G.add_edge(101, 65)
G.add_edge(101, 67)
G.add_edge(102, 66)
G.add_edge(102, 62)
G.add_edge(102, 63)
G.add_edge(102, 67)
G.add_edge(102, 68)
G.add_edge(102, 69)
G.add_edge(102, 70)
G.add_edge(103, 70)
G.add_edge(103, 67)
G.add_edge(103, 65)
G.add_edge(103, 60)
G.add_edge(103, 61)
G.add_edge(103, 71)
G.add_edge(103, 72)
G.add_edge(104, 72)
G.add_edge(104, 61)
G.add_edge(104, 56)
G.add_edge(104, 57)
G.add_edge(104, 66)
G.add_edge(104, 68)
G.add_edge(104, 73)
G.add_edge(105, 69)
G.add_edge(105, 70)
G.add_edge(105, 71)
G.add_edge(105, 74)
G.add_edge(106, 74)
G.add_edge(106, 71)
G.add_edge(106, 72)
G.add_edge(106, 73)
G.add_edge(107, 68)
G.add_edge(107, 69)
G.add_edge(107, 74)
G.add_edge(107, 73)
def scaling(x,i,j,n):
    return x*(n-j)

A = G.adjacency_matrix();

n = G.num_verts()
Munscaled = matrix(QQ, n,n, lambda i,j:-A[i,j]/G.degree(i) if i>=outerSize else 0) + identity_matrix(n)
M=matrix(QQ,n,n,lambda i,j: scaling(Munscaled[i,j],i,j,n) if i>j & i<countOfVertices else Munscaled[i,j])
jednicky = matrix(QQ,n,1,lambda i,j: -1)
soucty = M*jednicky
for i in range (n-outerSize):
    M[i+outerSize,i+outerSize]+=soucty[i+outerSize,0]

vy = matrix(QQ,n,1, lambda i,j:round(sin(i/outerSize*2*pi)*1000) if i<outerSize else 0)
vx = matrix(QQ,n,1, lambda i,j:round(cos(i/outerSize*2*pi)*1000) if i<outerSize else 0)
resX=M.inverse() * vx
resY=M.inverse()*vy
i=0
d=[[resX[i],resY[i]] for i in range(n)]

G.graphplot(save_pos=True)
dd=G.get_pos()

for i in range(n):
    dd[i]=[resX[i,0],resY[i,0]]

G.set_pos(dd)
#removing vertices that were used to make graph 3-connected
ran = range(countOfVertices, n)
G.delete_vertices(ran)
G.show()
