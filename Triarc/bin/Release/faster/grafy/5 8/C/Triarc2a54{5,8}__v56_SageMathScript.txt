G = Graph()
G.add_edge(0, 1)
G.add_edge(0, 13)
G.add_edge(1, 2)
G.add_edge(2, 3)
G.add_edge(2, 15)
G.add_edge(3, 4)
G.add_edge(4, 5)
G.add_edge(4, 20)
G.add_edge(5, 6)
G.add_edge(6, 7)
G.add_edge(6, 14)
G.add_edge(7, 8)
G.add_edge(8, 9)
G.add_edge(9, 10)
G.add_edge(9, 14)
G.add_edge(10, 11)
G.add_edge(11, 12)
G.add_edge(11, 16)
G.add_edge(12, 13)
G.add_edge(13, 15)
G.add_edge(14, 19)
G.add_edge(15, 16)
G.add_edge(16, 17)
G.add_edge(17, 18)
G.add_edge(17, 21)
G.add_edge(18, 19)
G.add_edge(18, 24)
G.add_edge(19, 22)
G.add_edge(20, 21)
G.add_edge(20, 23)
G.add_edge(21, 25)
G.add_edge(22, 23)
G.add_edge(22, 29)
G.add_edge(23, 26)
G.add_edge(24, 25)
G.add_edge(24, 27)
G.add_edge(25, 26)
G.add_edge(26, 28)
G.add_edge(27, 28)
G.add_edge(27, 31)
G.add_edge(28, 29)
G.add_edge(29, 30)
G.add_edge(30, 31)
G.add_edge(30, 34)
G.add_edge(31, 32)
G.add_edge(32, 33)
G.add_edge(32, 35)
G.add_edge(33, 34)
G.add_edge(33, 40)
G.add_edge(34, 35)
G.add_edge(35, 36)
G.add_edge(36, 37)
G.add_edge(36, 43)
G.add_edge(37, 38)
G.add_edge(37, 50)
G.add_edge(38, 39)
G.add_edge(38, 55)
G.add_edge(39, 40)
G.add_edge(39, 45)
G.add_edge(40, 41)
G.add_edge(41, 42)
G.add_edge(41, 44)
G.add_edge(42, 43)
G.add_edge(42, 46)
G.add_edge(43, 48)
G.add_edge(44, 45)
G.add_edge(44, 47)
G.add_edge(45, 54)
G.add_edge(46, 47)
G.add_edge(46, 49)
G.add_edge(47, 53)
G.add_edge(48, 49)
G.add_edge(48, 50)
G.add_edge(49, 52)
G.add_edge(50, 51)
G.add_edge(51, 52)
G.add_edge(51, 55)
G.add_edge(52, 53)
G.add_edge(53, 54)
G.add_edge(54, 55)
outerSize=14
countOfVertices=56
#Now adding vertices for each face, so that the graph is 3-connected.
G.add_edge(56, 9)
G.add_edge(56, 8)
G.add_edge(56, 7)
G.add_edge(56, 6)
G.add_edge(56, 14)
G.add_edge(57, 2)
G.add_edge(57, 1)
G.add_edge(57, 0)
G.add_edge(57, 13)
G.add_edge(57, 15)
G.add_edge(58, 15)
G.add_edge(58, 13)
G.add_edge(58, 12)
G.add_edge(58, 11)
G.add_edge(58, 16)
G.add_edge(59, 16)
G.add_edge(59, 11)
G.add_edge(59, 10)
G.add_edge(59, 9)
G.add_edge(59, 14)
G.add_edge(59, 17)
G.add_edge(59, 18)
G.add_edge(59, 19)
G.add_edge(60, 4)
G.add_edge(60, 3)
G.add_edge(60, 2)
G.add_edge(60, 15)
G.add_edge(60, 16)
G.add_edge(60, 17)
G.add_edge(60, 20)
G.add_edge(60, 21)
G.add_edge(61, 19)
G.add_edge(61, 14)
G.add_edge(61, 6)
G.add_edge(61, 5)
G.add_edge(61, 4)
G.add_edge(61, 20)
G.add_edge(61, 22)
G.add_edge(61, 23)
G.add_edge(62, 18)
G.add_edge(62, 17)
G.add_edge(62, 21)
G.add_edge(62, 24)
G.add_edge(62, 25)
G.add_edge(63, 25)
G.add_edge(63, 21)
G.add_edge(63, 20)
G.add_edge(63, 23)
G.add_edge(63, 26)
G.add_edge(64, 24)
G.add_edge(64, 25)
G.add_edge(64, 26)
G.add_edge(64, 27)
G.add_edge(64, 28)
G.add_edge(65, 28)
G.add_edge(65, 26)
G.add_edge(65, 23)
G.add_edge(65, 22)
G.add_edge(65, 29)
G.add_edge(66, 29)
G.add_edge(66, 22)
G.add_edge(66, 19)
G.add_edge(66, 18)
G.add_edge(66, 24)
G.add_edge(66, 27)
G.add_edge(66, 30)
G.add_edge(66, 31)
G.add_edge(67, 31)
G.add_edge(67, 30)
G.add_edge(67, 32)
G.add_edge(67, 33)
G.add_edge(67, 34)
G.add_edge(68, 34)
G.add_edge(68, 30)
G.add_edge(68, 29)
G.add_edge(68, 28)
G.add_edge(68, 27)
G.add_edge(68, 31)
G.add_edge(68, 32)
G.add_edge(68, 35)
G.add_edge(69, 35)
G.add_edge(69, 34)
G.add_edge(69, 33)
G.add_edge(69, 36)
G.add_edge(69, 37)
G.add_edge(69, 38)
G.add_edge(69, 39)
G.add_edge(69, 40)
G.add_edge(70, 40)
G.add_edge(70, 33)
G.add_edge(70, 32)
G.add_edge(70, 35)
G.add_edge(70, 36)
G.add_edge(70, 41)
G.add_edge(70, 42)
G.add_edge(70, 43)
G.add_edge(71, 41)
G.add_edge(71, 40)
G.add_edge(71, 39)
G.add_edge(71, 44)
G.add_edge(71, 45)
G.add_edge(72, 42)
G.add_edge(72, 41)
G.add_edge(72, 44)
G.add_edge(72, 46)
G.add_edge(72, 47)
G.add_edge(73, 43)
G.add_edge(73, 42)
G.add_edge(73, 46)
G.add_edge(73, 48)
G.add_edge(73, 49)
G.add_edge(74, 37)
G.add_edge(74, 36)
G.add_edge(74, 43)
G.add_edge(74, 48)
G.add_edge(74, 50)
G.add_edge(75, 50)
G.add_edge(75, 48)
G.add_edge(75, 49)
G.add_edge(75, 51)
G.add_edge(75, 52)
G.add_edge(76, 52)
G.add_edge(76, 49)
G.add_edge(76, 46)
G.add_edge(76, 47)
G.add_edge(76, 53)
G.add_edge(77, 53)
G.add_edge(77, 47)
G.add_edge(77, 44)
G.add_edge(77, 45)
G.add_edge(77, 54)
G.add_edge(78, 51)
G.add_edge(78, 52)
G.add_edge(78, 53)
G.add_edge(78, 54)
G.add_edge(78, 55)
G.add_edge(79, 55)
G.add_edge(79, 54)
G.add_edge(79, 45)
G.add_edge(79, 39)
G.add_edge(79, 38)
G.add_edge(80, 37)
G.add_edge(80, 50)
G.add_edge(80, 51)
G.add_edge(80, 55)
G.add_edge(80, 38)
def scaling(x,i,j,n):
    return x*(n-j)

A = G.adjacency_matrix();

n = G.num_verts()
Munscaled = matrix(QQ, n,n, lambda i,j:-A[i,j]/G.degree(i) if i>=outerSize else 0) + identity_matrix(n)
M=matrix(QQ,n,n,lambda i,j: scaling(Munscaled[i,j],i,j,n) if i>j & i<countOfVertices else Munscaled[i,j])
jednicky = matrix(QQ,n,1,lambda i,j: -1)
soucty = M*jednicky
for i in range (n-outerSize):
    M[i+outerSize,i+outerSize]+=soucty[i+outerSize,0]

vy = matrix(QQ,n,1, lambda i,j:round(sin(i/outerSize*2*pi)*1000) if i<outerSize else 0)
vx = matrix(QQ,n,1, lambda i,j:round(cos(i/outerSize*2*pi)*1000) if i<outerSize else 0)
resX=M.inverse() * vx
resY=M.inverse()*vy
i=0
d=[[resX[i],resY[i]] for i in range(n)]

G.graphplot(save_pos=True)
dd=G.get_pos()

for i in range(n):
    dd[i]=[resX[i,0],resY[i,0]]

G.set_pos(dd)
#removing vertices that were used to make graph 3-connected
ran = range(countOfVertices, n)
G.delete_vertices(ran)
G.show()
