G = Graph()
G.add_edge(0, 1)
G.add_edge(0, 13)
G.add_edge(1, 2)
G.add_edge(2, 3)
G.add_edge(2, 15)
G.add_edge(3, 4)
G.add_edge(4, 5)
G.add_edge(4, 16)
G.add_edge(5, 6)
G.add_edge(6, 7)
G.add_edge(6, 14)
G.add_edge(7, 8)
G.add_edge(8, 9)
G.add_edge(9, 10)
G.add_edge(9, 14)
G.add_edge(10, 11)
G.add_edge(11, 12)
G.add_edge(11, 17)
G.add_edge(12, 13)
G.add_edge(13, 15)
G.add_edge(14, 16)
G.add_edge(15, 17)
G.add_edge(16, 18)
G.add_edge(17, 20)
G.add_edge(18, 19)
G.add_edge(18, 21)
G.add_edge(19, 20)
G.add_edge(19, 22)
G.add_edge(20, 21)
G.add_edge(21, 23)
G.add_edge(22, 23)
G.add_edge(22, 24)
G.add_edge(23, 26)
G.add_edge(24, 25)
G.add_edge(24, 28)
G.add_edge(25, 26)
G.add_edge(25, 29)
G.add_edge(26, 27)
G.add_edge(27, 28)
G.add_edge(27, 30)
G.add_edge(28, 31)
G.add_edge(29, 30)
G.add_edge(29, 31)
G.add_edge(30, 33)
G.add_edge(31, 32)
G.add_edge(32, 33)
G.add_edge(32, 36)
G.add_edge(33, 34)
G.add_edge(34, 35)
G.add_edge(34, 37)
G.add_edge(35, 36)
G.add_edge(35, 39)
G.add_edge(36, 41)
G.add_edge(37, 38)
G.add_edge(37, 44)
G.add_edge(38, 39)
G.add_edge(38, 47)
G.add_edge(39, 40)
G.add_edge(40, 41)
G.add_edge(40, 45)
G.add_edge(41, 42)
G.add_edge(42, 43)
G.add_edge(42, 46)
G.add_edge(43, 44)
G.add_edge(43, 50)
G.add_edge(44, 48)
G.add_edge(45, 46)
G.add_edge(45, 47)
G.add_edge(46, 49)
G.add_edge(47, 48)
G.add_edge(48, 49)
G.add_edge(49, 54)
G.add_edge(50, 51)
G.add_edge(50, 57)
G.add_edge(51, 52)
G.add_edge(51, 62)
G.add_edge(52, 53)
G.add_edge(52, 60)
G.add_edge(53, 54)
G.add_edge(53, 58)
G.add_edge(54, 55)
G.add_edge(55, 56)
G.add_edge(55, 59)
G.add_edge(56, 57)
G.add_edge(56, 65)
G.add_edge(57, 64)
G.add_edge(58, 59)
G.add_edge(58, 61)
G.add_edge(59, 69)
G.add_edge(60, 61)
G.add_edge(60, 63)
G.add_edge(61, 68)
G.add_edge(62, 63)
G.add_edge(62, 64)
G.add_edge(63, 67)
G.add_edge(64, 66)
G.add_edge(65, 66)
G.add_edge(65, 69)
G.add_edge(66, 67)
G.add_edge(67, 68)
G.add_edge(68, 69)
outerSize=14
countOfVertices=70
#Now adding vertices for each face, so that the graph is 3-connected.
G.add_edge(70, 6)
G.add_edge(70, 7)
G.add_edge(70, 8)
G.add_edge(70, 9)
G.add_edge(70, 14)
G.add_edge(71, 13)
G.add_edge(71, 0)
G.add_edge(71, 1)
G.add_edge(71, 2)
G.add_edge(71, 15)
G.add_edge(72, 4)
G.add_edge(72, 5)
G.add_edge(72, 6)
G.add_edge(72, 14)
G.add_edge(72, 16)
G.add_edge(73, 11)
G.add_edge(73, 12)
G.add_edge(73, 13)
G.add_edge(73, 15)
G.add_edge(73, 17)
G.add_edge(74, 16)
G.add_edge(74, 14)
G.add_edge(74, 9)
G.add_edge(74, 10)
G.add_edge(74, 11)
G.add_edge(74, 17)
G.add_edge(74, 18)
G.add_edge(74, 19)
G.add_edge(74, 20)
G.add_edge(75, 20)
G.add_edge(75, 17)
G.add_edge(75, 15)
G.add_edge(75, 2)
G.add_edge(75, 3)
G.add_edge(75, 4)
G.add_edge(75, 16)
G.add_edge(75, 18)
G.add_edge(75, 21)
G.add_edge(76, 19)
G.add_edge(76, 20)
G.add_edge(76, 21)
G.add_edge(76, 22)
G.add_edge(76, 23)
G.add_edge(77, 22)
G.add_edge(77, 23)
G.add_edge(77, 24)
G.add_edge(77, 25)
G.add_edge(77, 26)
G.add_edge(78, 26)
G.add_edge(78, 23)
G.add_edge(78, 21)
G.add_edge(78, 18)
G.add_edge(78, 19)
G.add_edge(78, 22)
G.add_edge(78, 24)
G.add_edge(78, 27)
G.add_edge(78, 28)
G.add_edge(79, 25)
G.add_edge(79, 26)
G.add_edge(79, 27)
G.add_edge(79, 29)
G.add_edge(79, 30)
G.add_edge(80, 28)
G.add_edge(80, 24)
G.add_edge(80, 25)
G.add_edge(80, 29)
G.add_edge(80, 31)
G.add_edge(81, 31)
G.add_edge(81, 29)
G.add_edge(81, 30)
G.add_edge(81, 32)
G.add_edge(81, 33)
G.add_edge(82, 33)
G.add_edge(82, 30)
G.add_edge(82, 27)
G.add_edge(82, 28)
G.add_edge(82, 31)
G.add_edge(82, 32)
G.add_edge(82, 34)
G.add_edge(82, 35)
G.add_edge(82, 36)
G.add_edge(83, 34)
G.add_edge(83, 35)
G.add_edge(83, 37)
G.add_edge(83, 38)
G.add_edge(83, 39)
G.add_edge(84, 39)
G.add_edge(84, 35)
G.add_edge(84, 36)
G.add_edge(84, 40)
G.add_edge(84, 41)
G.add_edge(85, 41)
G.add_edge(85, 36)
G.add_edge(85, 32)
G.add_edge(85, 33)
G.add_edge(85, 34)
G.add_edge(85, 37)
G.add_edge(85, 42)
G.add_edge(85, 43)
G.add_edge(85, 44)
G.add_edge(86, 40)
G.add_edge(86, 41)
G.add_edge(86, 42)
G.add_edge(86, 45)
G.add_edge(86, 46)
G.add_edge(87, 38)
G.add_edge(87, 39)
G.add_edge(87, 40)
G.add_edge(87, 45)
G.add_edge(87, 47)
G.add_edge(88, 44)
G.add_edge(88, 37)
G.add_edge(88, 38)
G.add_edge(88, 47)
G.add_edge(88, 48)
G.add_edge(89, 48)
G.add_edge(89, 47)
G.add_edge(89, 45)
G.add_edge(89, 46)
G.add_edge(89, 49)
G.add_edge(90, 43)
G.add_edge(90, 44)
G.add_edge(90, 48)
G.add_edge(90, 49)
G.add_edge(90, 50)
G.add_edge(90, 51)
G.add_edge(90, 52)
G.add_edge(90, 53)
G.add_edge(90, 54)
G.add_edge(91, 54)
G.add_edge(91, 49)
G.add_edge(91, 46)
G.add_edge(91, 42)
G.add_edge(91, 43)
G.add_edge(91, 50)
G.add_edge(91, 55)
G.add_edge(91, 56)
G.add_edge(91, 57)
G.add_edge(92, 53)
G.add_edge(92, 54)
G.add_edge(92, 55)
G.add_edge(92, 58)
G.add_edge(92, 59)
G.add_edge(93, 52)
G.add_edge(93, 53)
G.add_edge(93, 58)
G.add_edge(93, 60)
G.add_edge(93, 61)
G.add_edge(94, 51)
G.add_edge(94, 52)
G.add_edge(94, 60)
G.add_edge(94, 62)
G.add_edge(94, 63)
G.add_edge(95, 57)
G.add_edge(95, 50)
G.add_edge(95, 51)
G.add_edge(95, 62)
G.add_edge(95, 64)
G.add_edge(96, 56)
G.add_edge(96, 57)
G.add_edge(96, 64)
G.add_edge(96, 65)
G.add_edge(96, 66)
G.add_edge(97, 66)
G.add_edge(97, 64)
G.add_edge(97, 62)
G.add_edge(97, 63)
G.add_edge(97, 67)
G.add_edge(98, 67)
G.add_edge(98, 63)
G.add_edge(98, 60)
G.add_edge(98, 61)
G.add_edge(98, 68)
G.add_edge(99, 65)
G.add_edge(99, 66)
G.add_edge(99, 67)
G.add_edge(99, 68)
G.add_edge(99, 69)
G.add_edge(100, 69)
G.add_edge(100, 68)
G.add_edge(100, 61)
G.add_edge(100, 58)
G.add_edge(100, 59)
G.add_edge(101, 55)
G.add_edge(101, 56)
G.add_edge(101, 65)
G.add_edge(101, 69)
G.add_edge(101, 59)
def scaling(x,i,j,n):
    return x*(n-j)

A = G.adjacency_matrix();

n = G.num_verts()
Munscaled = matrix(QQ, n,n, lambda i,j:-A[i,j]/G.degree(i) if i>=outerSize else 0) + identity_matrix(n)
M=matrix(QQ,n,n,lambda i,j: scaling(Munscaled[i,j],i,j,n) if i>j & i<countOfVertices else Munscaled[i,j])
jednicky = matrix(QQ,n,1,lambda i,j: -1)
soucty = M*jednicky
for i in range (n-outerSize):
    M[i+outerSize,i+outerSize]+=soucty[i+outerSize,0]

vy = matrix(QQ,n,1, lambda i,j:round(sin(i/outerSize*2*pi)*1000) if i<outerSize else 0)
vx = matrix(QQ,n,1, lambda i,j:round(cos(i/outerSize*2*pi)*1000) if i<outerSize else 0)
resX=M.inverse() * vx
resY=M.inverse()*vy
i=0
d=[[resX[i],resY[i]] for i in range(n)]

G.graphplot(save_pos=True)
dd=G.get_pos()

for i in range(n):
    dd[i]=[resX[i,0],resY[i,0]]

G.set_pos(dd)
#removing vertices that were used to make graph 3-connected
ran = range(countOfVertices, n)
G.delete_vertices(ran)
G.show()
