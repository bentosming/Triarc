G = Graph()
G.add_edge(0, 1)
G.add_edge(0, 30)
G.add_edge(1, 2)
G.add_edge(2, 3)
G.add_edge(3, 4)
G.add_edge(4, 5)
G.add_edge(5, 6)
G.add_edge(5, 30)
G.add_edge(6, 7)
G.add_edge(7, 8)
G.add_edge(7, 32)
G.add_edge(8, 9)
G.add_edge(9, 10)
G.add_edge(10, 11)
G.add_edge(11, 12)
G.add_edge(11, 33)
G.add_edge(12, 13)
G.add_edge(13, 14)
G.add_edge(13, 31)
G.add_edge(14, 15)
G.add_edge(15, 16)
G.add_edge(16, 17)
G.add_edge(17, 18)
G.add_edge(18, 19)
G.add_edge(18, 31)
G.add_edge(19, 20)
G.add_edge(20, 21)
G.add_edge(20, 39)
G.add_edge(21, 22)
G.add_edge(22, 23)
G.add_edge(22, 37)
G.add_edge(23, 24)
G.add_edge(24, 25)
G.add_edge(25, 26)
G.add_edge(26, 27)
G.add_edge(26, 34)
G.add_edge(27, 28)
G.add_edge(28, 29)
G.add_edge(28, 32)
G.add_edge(29, 30)
G.add_edge(31, 36)
G.add_edge(32, 33)
G.add_edge(33, 35)
G.add_edge(34, 35)
G.add_edge(34, 37)
G.add_edge(35, 36)
G.add_edge(36, 38)
G.add_edge(37, 40)
G.add_edge(38, 39)
G.add_edge(38, 41)
G.add_edge(39, 42)
G.add_edge(40, 41)
G.add_edge(40, 42)
G.add_edge(41, 46)
G.add_edge(42, 43)
G.add_edge(43, 44)
G.add_edge(43, 47)
G.add_edge(44, 45)
G.add_edge(44, 52)
G.add_edge(45, 46)
G.add_edge(45, 48)
G.add_edge(46, 47)
G.add_edge(47, 49)
G.add_edge(48, 49)
G.add_edge(48, 53)
G.add_edge(49, 50)
G.add_edge(50, 51)
G.add_edge(50, 54)
G.add_edge(51, 52)
G.add_edge(51, 58)
G.add_edge(52, 55)
G.add_edge(53, 54)
G.add_edge(53, 56)
G.add_edge(54, 57)
G.add_edge(55, 56)
G.add_edge(55, 60)
G.add_edge(56, 59)
G.add_edge(57, 58)
G.add_edge(57, 59)
G.add_edge(58, 60)
G.add_edge(59, 61)
G.add_edge(60, 63)
G.add_edge(61, 62)
G.add_edge(61, 64)
G.add_edge(62, 63)
G.add_edge(62, 65)
G.add_edge(63, 64)
G.add_edge(64, 66)
G.add_edge(65, 66)
G.add_edge(65, 68)
G.add_edge(66, 67)
G.add_edge(67, 68)
G.add_edge(67, 69)
G.add_edge(68, 73)
G.add_edge(69, 70)
G.add_edge(69, 74)
G.add_edge(70, 71)
G.add_edge(70, 77)
G.add_edge(71, 72)
G.add_edge(71, 78)
G.add_edge(72, 73)
G.add_edge(72, 75)
G.add_edge(73, 74)
G.add_edge(74, 76)
G.add_edge(75, 76)
G.add_edge(75, 81)
G.add_edge(76, 77)
G.add_edge(77, 84)
G.add_edge(78, 79)
G.add_edge(78, 86)
G.add_edge(79, 80)
G.add_edge(79, 89)
G.add_edge(80, 81)
G.add_edge(80, 87)
G.add_edge(81, 82)
G.add_edge(82, 83)
G.add_edge(82, 88)
G.add_edge(83, 84)
G.add_edge(83, 92)
G.add_edge(84, 85)
G.add_edge(85, 86)
G.add_edge(85, 93)
G.add_edge(86, 91)
G.add_edge(87, 88)
G.add_edge(87, 90)
G.add_edge(88, 96)
G.add_edge(89, 90)
G.add_edge(89, 91)
G.add_edge(90, 95)
G.add_edge(91, 94)
G.add_edge(92, 93)
G.add_edge(92, 96)
G.add_edge(93, 94)
G.add_edge(94, 95)
G.add_edge(95, 96)
outerSize=31
countOfVertices=97
#Now adding vertices for each face, so that the graph is 3-connected.
G.add_edge(97, 30)
G.add_edge(97, 0)
G.add_edge(97, 1)
G.add_edge(97, 2)
G.add_edge(97, 3)
G.add_edge(97, 4)
G.add_edge(97, 5)
G.add_edge(98, 13)
G.add_edge(98, 14)
G.add_edge(98, 15)
G.add_edge(98, 16)
G.add_edge(98, 17)
G.add_edge(98, 18)
G.add_edge(98, 31)
G.add_edge(99, 28)
G.add_edge(99, 29)
G.add_edge(99, 30)
G.add_edge(99, 5)
G.add_edge(99, 6)
G.add_edge(99, 7)
G.add_edge(99, 32)
G.add_edge(100, 32)
G.add_edge(100, 7)
G.add_edge(100, 8)
G.add_edge(100, 9)
G.add_edge(100, 10)
G.add_edge(100, 11)
G.add_edge(100, 33)
G.add_edge(101, 26)
G.add_edge(101, 27)
G.add_edge(101, 28)
G.add_edge(101, 32)
G.add_edge(101, 33)
G.add_edge(101, 34)
G.add_edge(101, 35)
G.add_edge(102, 35)
G.add_edge(102, 33)
G.add_edge(102, 11)
G.add_edge(102, 12)
G.add_edge(102, 13)
G.add_edge(102, 31)
G.add_edge(102, 36)
G.add_edge(103, 22)
G.add_edge(103, 23)
G.add_edge(103, 24)
G.add_edge(103, 25)
G.add_edge(103, 26)
G.add_edge(103, 34)
G.add_edge(103, 37)
G.add_edge(104, 36)
G.add_edge(104, 31)
G.add_edge(104, 18)
G.add_edge(104, 19)
G.add_edge(104, 20)
G.add_edge(104, 38)
G.add_edge(104, 39)
G.add_edge(105, 37)
G.add_edge(105, 34)
G.add_edge(105, 35)
G.add_edge(105, 36)
G.add_edge(105, 38)
G.add_edge(105, 40)
G.add_edge(105, 41)
G.add_edge(106, 39)
G.add_edge(106, 20)
G.add_edge(106, 21)
G.add_edge(106, 22)
G.add_edge(106, 37)
G.add_edge(106, 40)
G.add_edge(106, 42)
G.add_edge(107, 42)
G.add_edge(107, 40)
G.add_edge(107, 41)
G.add_edge(107, 43)
G.add_edge(107, 44)
G.add_edge(107, 45)
G.add_edge(107, 46)
G.add_edge(108, 46)
G.add_edge(108, 41)
G.add_edge(108, 38)
G.add_edge(108, 39)
G.add_edge(108, 42)
G.add_edge(108, 43)
G.add_edge(108, 47)
G.add_edge(109, 45)
G.add_edge(109, 46)
G.add_edge(109, 47)
G.add_edge(109, 48)
G.add_edge(109, 49)
G.add_edge(110, 49)
G.add_edge(110, 47)
G.add_edge(110, 43)
G.add_edge(110, 44)
G.add_edge(110, 50)
G.add_edge(110, 51)
G.add_edge(110, 52)
G.add_edge(111, 48)
G.add_edge(111, 49)
G.add_edge(111, 50)
G.add_edge(111, 53)
G.add_edge(111, 54)
G.add_edge(112, 52)
G.add_edge(112, 44)
G.add_edge(112, 45)
G.add_edge(112, 48)
G.add_edge(112, 53)
G.add_edge(112, 55)
G.add_edge(112, 56)
G.add_edge(113, 54)
G.add_edge(113, 50)
G.add_edge(113, 51)
G.add_edge(113, 57)
G.add_edge(113, 58)
G.add_edge(114, 56)
G.add_edge(114, 53)
G.add_edge(114, 54)
G.add_edge(114, 57)
G.add_edge(114, 59)
G.add_edge(115, 58)
G.add_edge(115, 51)
G.add_edge(115, 52)
G.add_edge(115, 55)
G.add_edge(115, 60)
G.add_edge(116, 59)
G.add_edge(116, 57)
G.add_edge(116, 58)
G.add_edge(116, 60)
G.add_edge(116, 61)
G.add_edge(116, 62)
G.add_edge(116, 63)
G.add_edge(117, 63)
G.add_edge(117, 60)
G.add_edge(117, 55)
G.add_edge(117, 56)
G.add_edge(117, 59)
G.add_edge(117, 61)
G.add_edge(117, 64)
G.add_edge(118, 62)
G.add_edge(118, 63)
G.add_edge(118, 64)
G.add_edge(118, 65)
G.add_edge(118, 66)
G.add_edge(119, 66)
G.add_edge(119, 64)
G.add_edge(119, 61)
G.add_edge(119, 62)
G.add_edge(119, 65)
G.add_edge(119, 67)
G.add_edge(119, 68)
G.add_edge(120, 67)
G.add_edge(120, 68)
G.add_edge(120, 69)
G.add_edge(120, 70)
G.add_edge(120, 71)
G.add_edge(120, 72)
G.add_edge(120, 73)
G.add_edge(121, 73)
G.add_edge(121, 68)
G.add_edge(121, 65)
G.add_edge(121, 66)
G.add_edge(121, 67)
G.add_edge(121, 69)
G.add_edge(121, 74)
G.add_edge(122, 72)
G.add_edge(122, 73)
G.add_edge(122, 74)
G.add_edge(122, 75)
G.add_edge(122, 76)
G.add_edge(123, 76)
G.add_edge(123, 74)
G.add_edge(123, 69)
G.add_edge(123, 70)
G.add_edge(123, 77)
G.add_edge(124, 71)
G.add_edge(124, 72)
G.add_edge(124, 75)
G.add_edge(124, 78)
G.add_edge(124, 79)
G.add_edge(124, 80)
G.add_edge(124, 81)
G.add_edge(125, 81)
G.add_edge(125, 75)
G.add_edge(125, 76)
G.add_edge(125, 77)
G.add_edge(125, 82)
G.add_edge(125, 83)
G.add_edge(125, 84)
G.add_edge(126, 84)
G.add_edge(126, 77)
G.add_edge(126, 70)
G.add_edge(126, 71)
G.add_edge(126, 78)
G.add_edge(126, 85)
G.add_edge(126, 86)
G.add_edge(127, 80)
G.add_edge(127, 81)
G.add_edge(127, 82)
G.add_edge(127, 87)
G.add_edge(127, 88)
G.add_edge(128, 79)
G.add_edge(128, 80)
G.add_edge(128, 87)
G.add_edge(128, 89)
G.add_edge(128, 90)
G.add_edge(129, 86)
G.add_edge(129, 78)
G.add_edge(129, 79)
G.add_edge(129, 89)
G.add_edge(129, 91)
G.add_edge(130, 83)
G.add_edge(130, 84)
G.add_edge(130, 85)
G.add_edge(130, 92)
G.add_edge(130, 93)
G.add_edge(131, 93)
G.add_edge(131, 85)
G.add_edge(131, 86)
G.add_edge(131, 91)
G.add_edge(131, 94)
G.add_edge(132, 94)
G.add_edge(132, 91)
G.add_edge(132, 89)
G.add_edge(132, 90)
G.add_edge(132, 95)
G.add_edge(133, 92)
G.add_edge(133, 93)
G.add_edge(133, 94)
G.add_edge(133, 95)
G.add_edge(133, 96)
G.add_edge(134, 96)
G.add_edge(134, 95)
G.add_edge(134, 90)
G.add_edge(134, 87)
G.add_edge(134, 88)
G.add_edge(135, 82)
G.add_edge(135, 83)
G.add_edge(135, 92)
G.add_edge(135, 96)
G.add_edge(135, 88)
def scaling(x,i,j,n):
    return x*(n-j)

A = G.adjacency_matrix();

n = G.num_verts()
Munscaled = matrix(QQ, n,n, lambda i,j:-A[i,j]/G.degree(i) if i>=outerSize else 0) + identity_matrix(n)
M=matrix(QQ,n,n,lambda i,j: scaling(Munscaled[i,j],i,j,n) if i>j & i<countOfVertices else Munscaled[i,j])
jednicky = matrix(QQ,n,1,lambda i,j: -1)
soucty = M*jednicky
for i in range (n-outerSize):
    M[i+outerSize,i+outerSize]+=soucty[i+outerSize,0]

vy = matrix(QQ,n,1, lambda i,j:round(sin(i/outerSize*2*pi)*1000) if i<outerSize else 0)
vx = matrix(QQ,n,1, lambda i,j:round(cos(i/outerSize*2*pi)*1000) if i<outerSize else 0)
resX=M.inverse() * vx
resY=M.inverse()*vy
i=0
d=[[resX[i],resY[i]] for i in range(n)]

G.graphplot(save_pos=True)
dd=G.get_pos()

for i in range(n):
    dd[i]=[resX[i,0],resY[i,0]]

G.set_pos(dd)
#removing vertices that were used to make graph 3-connected
ran = range(countOfVertices, n)
G.delete_vertices(ran)
G.show()
