G = Graph()
G.add_edge(0, 1)
G.add_edge(0, 13)
G.add_edge(1, 2)
G.add_edge(2, 3)
G.add_edge(2, 15)
G.add_edge(3, 4)
G.add_edge(4, 5)
G.add_edge(4, 16)
G.add_edge(5, 6)
G.add_edge(6, 7)
G.add_edge(6, 14)
G.add_edge(7, 8)
G.add_edge(8, 9)
G.add_edge(9, 10)
G.add_edge(9, 14)
G.add_edge(10, 11)
G.add_edge(11, 12)
G.add_edge(11, 17)
G.add_edge(12, 13)
G.add_edge(13, 15)
G.add_edge(14, 16)
G.add_edge(15, 17)
G.add_edge(16, 18)
G.add_edge(17, 22)
G.add_edge(18, 19)
G.add_edge(18, 25)
G.add_edge(19, 20)
G.add_edge(19, 30)
G.add_edge(20, 21)
G.add_edge(20, 28)
G.add_edge(21, 22)
G.add_edge(21, 26)
G.add_edge(22, 23)
G.add_edge(23, 24)
G.add_edge(23, 27)
G.add_edge(24, 25)
G.add_edge(24, 33)
G.add_edge(25, 32)
G.add_edge(26, 27)
G.add_edge(26, 29)
G.add_edge(27, 37)
G.add_edge(28, 29)
G.add_edge(28, 31)
G.add_edge(29, 36)
G.add_edge(30, 31)
G.add_edge(30, 32)
G.add_edge(31, 35)
G.add_edge(32, 34)
G.add_edge(33, 34)
G.add_edge(33, 37)
G.add_edge(34, 35)
G.add_edge(35, 36)
G.add_edge(36, 37)
outerSize=14
countOfVertices=38
#Now adding vertices for each face, so that the graph is 3-connected.
G.add_edge(38, 6)
G.add_edge(38, 7)
G.add_edge(38, 8)
G.add_edge(38, 9)
G.add_edge(38, 14)
G.add_edge(39, 13)
G.add_edge(39, 0)
G.add_edge(39, 1)
G.add_edge(39, 2)
G.add_edge(39, 15)
G.add_edge(40, 4)
G.add_edge(40, 5)
G.add_edge(40, 6)
G.add_edge(40, 14)
G.add_edge(40, 16)
G.add_edge(41, 11)
G.add_edge(41, 12)
G.add_edge(41, 13)
G.add_edge(41, 15)
G.add_edge(41, 17)
G.add_edge(42, 16)
G.add_edge(42, 14)
G.add_edge(42, 9)
G.add_edge(42, 10)
G.add_edge(42, 11)
G.add_edge(42, 17)
G.add_edge(42, 18)
G.add_edge(42, 19)
G.add_edge(42, 20)
G.add_edge(42, 21)
G.add_edge(42, 22)
G.add_edge(43, 22)
G.add_edge(43, 17)
G.add_edge(43, 15)
G.add_edge(43, 2)
G.add_edge(43, 3)
G.add_edge(43, 4)
G.add_edge(43, 16)
G.add_edge(43, 18)
G.add_edge(43, 23)
G.add_edge(43, 24)
G.add_edge(43, 25)
G.add_edge(44, 21)
G.add_edge(44, 22)
G.add_edge(44, 23)
G.add_edge(44, 26)
G.add_edge(44, 27)
G.add_edge(45, 20)
G.add_edge(45, 21)
G.add_edge(45, 26)
G.add_edge(45, 28)
G.add_edge(45, 29)
G.add_edge(46, 19)
G.add_edge(46, 20)
G.add_edge(46, 28)
G.add_edge(46, 30)
G.add_edge(46, 31)
G.add_edge(47, 25)
G.add_edge(47, 18)
G.add_edge(47, 19)
G.add_edge(47, 30)
G.add_edge(47, 32)
G.add_edge(48, 24)
G.add_edge(48, 25)
G.add_edge(48, 32)
G.add_edge(48, 33)
G.add_edge(48, 34)
G.add_edge(49, 34)
G.add_edge(49, 32)
G.add_edge(49, 30)
G.add_edge(49, 31)
G.add_edge(49, 35)
G.add_edge(50, 35)
G.add_edge(50, 31)
G.add_edge(50, 28)
G.add_edge(50, 29)
G.add_edge(50, 36)
G.add_edge(51, 33)
G.add_edge(51, 34)
G.add_edge(51, 35)
G.add_edge(51, 36)
G.add_edge(51, 37)
G.add_edge(52, 37)
G.add_edge(52, 36)
G.add_edge(52, 29)
G.add_edge(52, 26)
G.add_edge(52, 27)
G.add_edge(53, 23)
G.add_edge(53, 24)
G.add_edge(53, 33)
G.add_edge(53, 37)
G.add_edge(53, 27)
def scaling(x,i,j,n):
    return x*(n-j)

A = G.adjacency_matrix();

n = G.num_verts()
Munscaled = matrix(QQ, n,n, lambda i,j:-A[i,j]/G.degree(i) if i>=outerSize else 0) + identity_matrix(n)
M=matrix(QQ,n,n,lambda i,j: scaling(Munscaled[i,j],i,j,n) if i>j & i<countOfVertices else Munscaled[i,j])
jednicky = matrix(QQ,n,1,lambda i,j: -1)
soucty = M*jednicky
for i in range (n-outerSize):
    M[i+outerSize,i+outerSize]+=soucty[i+outerSize,0]

vy = matrix(QQ,n,1, lambda i,j:round(sin(i/outerSize*2*pi)*1000) if i<outerSize else 0)
vx = matrix(QQ,n,1, lambda i,j:round(cos(i/outerSize*2*pi)*1000) if i<outerSize else 0)
resX=M.inverse() * vx
resY=M.inverse()*vy
i=0
d=[[resX[i],resY[i]] for i in range(n)]

G.graphplot(save_pos=True)
dd=G.get_pos()

for i in range(n):
    dd[i]=[resX[i,0],resY[i,0]]

G.set_pos(dd)
#removing vertices that were used to make graph 3-connected
ran = range(countOfVertices, n)
G.delete_vertices(ran)
G.show()
