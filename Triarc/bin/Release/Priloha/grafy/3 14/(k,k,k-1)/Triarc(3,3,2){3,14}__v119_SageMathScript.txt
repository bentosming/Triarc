G = Graph()
G.add_edge(0, 1)
G.add_edge(0, 15)
G.add_edge(1, 2)
G.add_edge(2, 3)
G.add_edge(2, 4)
G.add_edge(3, 4)
G.add_edge(4, 5)
G.add_edge(5, 6)
G.add_edge(6, 7)
G.add_edge(7, 8)
G.add_edge(8, 9)
G.add_edge(8, 19)
G.add_edge(9, 10)
G.add_edge(10, 11)
G.add_edge(10, 25)
G.add_edge(11, 12)
G.add_edge(12, 13)
G.add_edge(13, 14)
G.add_edge(14, 15)
G.add_edge(14, 16)
G.add_edge(16, 17)
G.add_edge(16, 20)
G.add_edge(17, 18)
G.add_edge(17, 20)
G.add_edge(18, 19)
G.add_edge(18, 20)
G.add_edge(19, 21)
G.add_edge(21, 22)
G.add_edge(21, 26)
G.add_edge(22, 23)
G.add_edge(22, 26)
G.add_edge(23, 24)
G.add_edge(23, 26)
G.add_edge(24, 25)
G.add_edge(24, 31)
G.add_edge(25, 27)
G.add_edge(27, 28)
G.add_edge(27, 33)
G.add_edge(28, 29)
G.add_edge(28, 39)
G.add_edge(29, 30)
G.add_edge(29, 32)
G.add_edge(30, 31)
G.add_edge(30, 32)
G.add_edge(31, 32)
G.add_edge(33, 34)
G.add_edge(33, 40)
G.add_edge(34, 35)
G.add_edge(34, 40)
G.add_edge(35, 36)
G.add_edge(35, 40)
G.add_edge(36, 37)
G.add_edge(36, 47)
G.add_edge(37, 38)
G.add_edge(37, 54)
G.add_edge(38, 39)
G.add_edge(38, 54)
G.add_edge(39, 41)
G.add_edge(41, 42)
G.add_edge(41, 49)
G.add_edge(42, 43)
G.add_edge(42, 49)
G.add_edge(43, 44)
G.add_edge(43, 49)
G.add_edge(44, 45)
G.add_edge(44, 48)
G.add_edge(45, 46)
G.add_edge(45, 48)
G.add_edge(46, 47)
G.add_edge(46, 48)
G.add_edge(47, 50)
G.add_edge(50, 51)
G.add_edge(50, 55)
G.add_edge(51, 52)
G.add_edge(51, 55)
G.add_edge(52, 53)
G.add_edge(52, 56)
G.add_edge(53, 54)
G.add_edge(53, 56)
G.add_edge(55, 62)
G.add_edge(56, 57)
G.add_edge(57, 58)
G.add_edge(57, 64)
G.add_edge(58, 59)
G.add_edge(58, 68)
G.add_edge(59, 60)
G.add_edge(59, 68)
G.add_edge(60, 61)
G.add_edge(60, 63)
G.add_edge(61, 62)
G.add_edge(61, 63)
G.add_edge(62, 63)
G.add_edge(64, 65)
G.add_edge(64, 69)
G.add_edge(65, 66)
G.add_edge(65, 69)
G.add_edge(66, 67)
G.add_edge(66, 70)
G.add_edge(67, 68)
G.add_edge(67, 70)
G.add_edge(69, 77)
G.add_edge(70, 71)
G.add_edge(71, 72)
G.add_edge(71, 79)
G.add_edge(72, 73)
G.add_edge(72, 79)
G.add_edge(73, 74)
G.add_edge(73, 83)
G.add_edge(74, 75)
G.add_edge(74, 83)
G.add_edge(75, 76)
G.add_edge(75, 78)
G.add_edge(76, 77)
G.add_edge(76, 78)
G.add_edge(77, 78)
G.add_edge(79, 80)
G.add_edge(80, 81)
G.add_edge(80, 84)
G.add_edge(81, 82)
G.add_edge(81, 84)
G.add_edge(82, 83)
G.add_edge(82, 85)
G.add_edge(84, 91)
G.add_edge(85, 86)
G.add_edge(85, 94)
G.add_edge(86, 87)
G.add_edge(86, 94)
G.add_edge(87, 88)
G.add_edge(87, 92)
G.add_edge(88, 89)
G.add_edge(88, 92)
G.add_edge(89, 90)
G.add_edge(89, 92)
G.add_edge(90, 91)
G.add_edge(90, 93)
G.add_edge(91, 93)
G.add_edge(93, 101)
G.add_edge(94, 95)
G.add_edge(95, 96)
G.add_edge(95, 102)
G.add_edge(96, 97)
G.add_edge(96, 110)
G.add_edge(97, 98)
G.add_edge(97, 110)
G.add_edge(98, 99)
G.add_edge(98, 108)
G.add_edge(99, 100)
G.add_edge(99, 108)
G.add_edge(100, 101)
G.add_edge(100, 108)
G.add_edge(101, 106)
G.add_edge(102, 103)
G.add_edge(102, 107)
G.add_edge(103, 104)
G.add_edge(103, 107)
G.add_edge(104, 105)
G.add_edge(104, 107)
G.add_edge(105, 106)
G.add_edge(105, 109)
G.add_edge(106, 109)
G.add_edge(109, 111)
G.add_edge(110, 116)
G.add_edge(111, 112)
G.add_edge(111, 117)
G.add_edge(112, 113)
G.add_edge(112, 117)
G.add_edge(113, 114)
G.add_edge(113, 117)
G.add_edge(114, 115)
G.add_edge(114, 118)
G.add_edge(115, 116)
G.add_edge(115, 118)
G.add_edge(116, 118)
outerSize=16
countOfVertices=119
#Now adding vertices for each face, so that the graph is 3-connected.
G.add_edge(119, 2)
G.add_edge(119, 3)
G.add_edge(119, 4)
G.add_edge(120, 14)
G.add_edge(120, 15)
G.add_edge(120, 0)
G.add_edge(120, 1)
G.add_edge(120, 2)
G.add_edge(120, 4)
G.add_edge(120, 5)
G.add_edge(120, 6)
G.add_edge(120, 7)
G.add_edge(120, 8)
G.add_edge(120, 16)
G.add_edge(120, 17)
G.add_edge(120, 18)
G.add_edge(120, 19)
G.add_edge(121, 17)
G.add_edge(121, 18)
G.add_edge(121, 20)
G.add_edge(122, 20)
G.add_edge(122, 17)
G.add_edge(122, 16)
G.add_edge(123, 19)
G.add_edge(123, 18)
G.add_edge(123, 20)
G.add_edge(123, 16)
G.add_edge(123, 14)
G.add_edge(123, 13)
G.add_edge(123, 12)
G.add_edge(123, 11)
G.add_edge(123, 10)
G.add_edge(123, 21)
G.add_edge(123, 22)
G.add_edge(123, 23)
G.add_edge(123, 24)
G.add_edge(123, 25)
G.add_edge(124, 22)
G.add_edge(124, 23)
G.add_edge(124, 26)
G.add_edge(125, 21)
G.add_edge(125, 22)
G.add_edge(125, 26)
G.add_edge(126, 25)
G.add_edge(126, 10)
G.add_edge(126, 9)
G.add_edge(126, 8)
G.add_edge(126, 19)
G.add_edge(126, 21)
G.add_edge(126, 26)
G.add_edge(126, 23)
G.add_edge(126, 24)
G.add_edge(126, 27)
G.add_edge(126, 28)
G.add_edge(126, 29)
G.add_edge(126, 30)
G.add_edge(126, 31)
G.add_edge(127, 30)
G.add_edge(127, 29)
G.add_edge(127, 32)
G.add_edge(128, 31)
G.add_edge(128, 30)
G.add_edge(128, 32)
G.add_edge(129, 27)
G.add_edge(129, 25)
G.add_edge(129, 24)
G.add_edge(129, 31)
G.add_edge(129, 32)
G.add_edge(129, 29)
G.add_edge(129, 28)
G.add_edge(129, 33)
G.add_edge(129, 34)
G.add_edge(129, 35)
G.add_edge(129, 36)
G.add_edge(129, 37)
G.add_edge(129, 38)
G.add_edge(129, 39)
G.add_edge(130, 34)
G.add_edge(130, 35)
G.add_edge(130, 40)
G.add_edge(131, 33)
G.add_edge(131, 34)
G.add_edge(131, 40)
G.add_edge(132, 39)
G.add_edge(132, 28)
G.add_edge(132, 27)
G.add_edge(132, 33)
G.add_edge(132, 40)
G.add_edge(132, 35)
G.add_edge(132, 36)
G.add_edge(132, 41)
G.add_edge(132, 42)
G.add_edge(132, 43)
G.add_edge(132, 44)
G.add_edge(132, 45)
G.add_edge(132, 46)
G.add_edge(132, 47)
G.add_edge(133, 45)
G.add_edge(133, 44)
G.add_edge(133, 48)
G.add_edge(134, 46)
G.add_edge(134, 45)
G.add_edge(134, 48)
G.add_edge(135, 42)
G.add_edge(135, 41)
G.add_edge(135, 49)
G.add_edge(136, 43)
G.add_edge(136, 42)
G.add_edge(136, 49)
G.add_edge(137, 47)
G.add_edge(137, 46)
G.add_edge(137, 48)
G.add_edge(137, 44)
G.add_edge(137, 43)
G.add_edge(137, 49)
G.add_edge(137, 41)
G.add_edge(137, 39)
G.add_edge(137, 38)
G.add_edge(137, 50)
G.add_edge(137, 51)
G.add_edge(137, 52)
G.add_edge(137, 53)
G.add_edge(137, 54)
G.add_edge(138, 54)
G.add_edge(138, 38)
G.add_edge(138, 37)
G.add_edge(139, 50)
G.add_edge(139, 51)
G.add_edge(139, 55)
G.add_edge(140, 53)
G.add_edge(140, 52)
G.add_edge(140, 56)
G.add_edge(141, 56)
G.add_edge(141, 53)
G.add_edge(141, 54)
G.add_edge(141, 37)
G.add_edge(141, 36)
G.add_edge(141, 47)
G.add_edge(141, 50)
G.add_edge(141, 55)
G.add_edge(141, 57)
G.add_edge(141, 58)
G.add_edge(141, 59)
G.add_edge(141, 60)
G.add_edge(141, 61)
G.add_edge(141, 62)
G.add_edge(142, 61)
G.add_edge(142, 60)
G.add_edge(142, 63)
G.add_edge(143, 62)
G.add_edge(143, 61)
G.add_edge(143, 63)
G.add_edge(144, 57)
G.add_edge(144, 56)
G.add_edge(144, 52)
G.add_edge(144, 51)
G.add_edge(144, 55)
G.add_edge(144, 62)
G.add_edge(144, 63)
G.add_edge(144, 60)
G.add_edge(144, 59)
G.add_edge(144, 64)
G.add_edge(144, 65)
G.add_edge(144, 66)
G.add_edge(144, 67)
G.add_edge(144, 68)
G.add_edge(145, 68)
G.add_edge(145, 59)
G.add_edge(145, 58)
G.add_edge(146, 64)
G.add_edge(146, 65)
G.add_edge(146, 69)
G.add_edge(147, 66)
G.add_edge(147, 67)
G.add_edge(147, 70)
G.add_edge(148, 70)
G.add_edge(148, 67)
G.add_edge(148, 68)
G.add_edge(148, 58)
G.add_edge(148, 57)
G.add_edge(148, 64)
G.add_edge(148, 69)
G.add_edge(148, 71)
G.add_edge(148, 72)
G.add_edge(148, 73)
G.add_edge(148, 74)
G.add_edge(148, 75)
G.add_edge(148, 76)
G.add_edge(148, 77)
G.add_edge(149, 76)
G.add_edge(149, 75)
G.add_edge(149, 78)
G.add_edge(150, 77)
G.add_edge(150, 76)
G.add_edge(150, 78)
G.add_edge(151, 71)
G.add_edge(151, 70)
G.add_edge(151, 66)
G.add_edge(151, 65)
G.add_edge(151, 69)
G.add_edge(151, 77)
G.add_edge(151, 78)
G.add_edge(151, 75)
G.add_edge(151, 74)
G.add_edge(151, 79)
G.add_edge(151, 80)
G.add_edge(151, 81)
G.add_edge(151, 82)
G.add_edge(151, 83)
G.add_edge(152, 83)
G.add_edge(152, 74)
G.add_edge(152, 73)
G.add_edge(153, 72)
G.add_edge(153, 71)
G.add_edge(153, 79)
G.add_edge(154, 80)
G.add_edge(154, 81)
G.add_edge(154, 84)
G.add_edge(155, 82)
G.add_edge(155, 83)
G.add_edge(155, 73)
G.add_edge(155, 72)
G.add_edge(155, 79)
G.add_edge(155, 80)
G.add_edge(155, 84)
G.add_edge(155, 85)
G.add_edge(155, 86)
G.add_edge(155, 87)
G.add_edge(155, 88)
G.add_edge(155, 89)
G.add_edge(155, 90)
G.add_edge(155, 91)
G.add_edge(156, 89)
G.add_edge(156, 88)
G.add_edge(156, 92)
G.add_edge(157, 87)
G.add_edge(157, 88)
G.add_edge(157, 92)
G.add_edge(158, 91)
G.add_edge(158, 90)
G.add_edge(158, 93)
G.add_edge(159, 85)
G.add_edge(159, 86)
G.add_edge(159, 94)
G.add_edge(160, 94)
G.add_edge(160, 86)
G.add_edge(160, 87)
G.add_edge(160, 92)
G.add_edge(160, 89)
G.add_edge(160, 90)
G.add_edge(160, 93)
G.add_edge(160, 95)
G.add_edge(160, 96)
G.add_edge(160, 97)
G.add_edge(160, 98)
G.add_edge(160, 99)
G.add_edge(160, 100)
G.add_edge(160, 101)
G.add_edge(161, 95)
G.add_edge(161, 94)
G.add_edge(161, 85)
G.add_edge(161, 82)
G.add_edge(161, 81)
G.add_edge(161, 84)
G.add_edge(161, 91)
G.add_edge(161, 93)
G.add_edge(161, 101)
G.add_edge(161, 102)
G.add_edge(161, 103)
G.add_edge(161, 104)
G.add_edge(161, 105)
G.add_edge(161, 106)
G.add_edge(162, 103)
G.add_edge(162, 104)
G.add_edge(162, 107)
G.add_edge(163, 102)
G.add_edge(163, 103)
G.add_edge(163, 107)
G.add_edge(164, 99)
G.add_edge(164, 98)
G.add_edge(164, 108)
G.add_edge(165, 108)
G.add_edge(165, 99)
G.add_edge(165, 100)
G.add_edge(166, 105)
G.add_edge(166, 106)
G.add_edge(166, 109)
G.add_edge(167, 96)
G.add_edge(167, 97)
G.add_edge(167, 110)
G.add_edge(168, 109)
G.add_edge(168, 106)
G.add_edge(168, 101)
G.add_edge(168, 100)
G.add_edge(168, 108)
G.add_edge(168, 98)
G.add_edge(168, 97)
G.add_edge(168, 110)
G.add_edge(168, 111)
G.add_edge(168, 112)
G.add_edge(168, 113)
G.add_edge(168, 114)
G.add_edge(168, 115)
G.add_edge(168, 116)
G.add_edge(169, 112)
G.add_edge(169, 113)
G.add_edge(169, 117)
G.add_edge(170, 111)
G.add_edge(170, 112)
G.add_edge(170, 117)
G.add_edge(171, 114)
G.add_edge(171, 115)
G.add_edge(171, 118)
G.add_edge(172, 116)
G.add_edge(172, 110)
G.add_edge(172, 96)
G.add_edge(172, 95)
G.add_edge(172, 102)
G.add_edge(172, 107)
G.add_edge(172, 104)
G.add_edge(172, 105)
G.add_edge(172, 109)
G.add_edge(172, 111)
G.add_edge(172, 117)
G.add_edge(172, 113)
G.add_edge(172, 114)
G.add_edge(172, 118)
G.add_edge(173, 115)
G.add_edge(173, 118)
G.add_edge(173, 116)
def scaling(x,i,j,n):
    return x*(n-j)

A = G.adjacency_matrix();

n = G.num_verts()
Munscaled = matrix(QQ, n,n, lambda i,j:-A[i,j]/G.degree(i) if i>=outerSize else 0) + identity_matrix(n)
M=matrix(QQ,n,n,lambda i,j: scaling(Munscaled[i,j],i,j,n) if i>j & i<countOfVertices else Munscaled[i,j])
jednicky = matrix(QQ,n,1,lambda i,j: -1)
soucty = M*jednicky
for i in range (n-outerSize):
    M[i+outerSize,i+outerSize]+=soucty[i+outerSize,0]

vy = matrix(QQ,n,1, lambda i,j:round(sin(i/outerSize*2*pi)*1000) if i<outerSize else 0)
vx = matrix(QQ,n,1, lambda i,j:round(cos(i/outerSize*2*pi)*1000) if i<outerSize else 0)
resX=M.inverse() * vx
resY=M.inverse()*vy
i=0
d=[[resX[i],resY[i]] for i in range(n)]

G.graphplot(save_pos=True)
dd=G.get_pos()

for i in range(n):
    dd[i]=[resX[i,0],resY[i,0]]

G.set_pos(dd)
#removing vertices that were used to make graph 3-connected
ran = range(countOfVertices, n)
G.delete_vertices(ran)
G.show()
