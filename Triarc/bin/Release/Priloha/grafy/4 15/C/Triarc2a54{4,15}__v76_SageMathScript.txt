G = Graph()
G.add_edge(0, 1)
G.add_edge(0, 13)
G.add_edge(1, 2)
G.add_edge(2, 3)
G.add_edge(2, 15)
G.add_edge(3, 4)
G.add_edge(4, 5)
G.add_edge(4, 20)
G.add_edge(5, 6)
G.add_edge(6, 7)
G.add_edge(6, 20)
G.add_edge(7, 8)
G.add_edge(8, 9)
G.add_edge(9, 10)
G.add_edge(9, 14)
G.add_edge(10, 11)
G.add_edge(11, 12)
G.add_edge(11, 14)
G.add_edge(12, 13)
G.add_edge(13, 14)
G.add_edge(15, 16)
G.add_edge(15, 23)
G.add_edge(16, 17)
G.add_edge(16, 21)
G.add_edge(17, 18)
G.add_edge(17, 22)
G.add_edge(18, 19)
G.add_edge(18, 32)
G.add_edge(19, 20)
G.add_edge(19, 25)
G.add_edge(21, 22)
G.add_edge(21, 23)
G.add_edge(22, 24)
G.add_edge(23, 24)
G.add_edge(24, 31)
G.add_edge(25, 26)
G.add_edge(25, 32)
G.add_edge(26, 27)
G.add_edge(26, 33)
G.add_edge(27, 28)
G.add_edge(27, 34)
G.add_edge(28, 29)
G.add_edge(28, 35)
G.add_edge(29, 30)
G.add_edge(29, 36)
G.add_edge(30, 31)
G.add_edge(30, 42)
G.add_edge(31, 41)
G.add_edge(32, 33)
G.add_edge(33, 34)
G.add_edge(34, 35)
G.add_edge(35, 36)
G.add_edge(36, 37)
G.add_edge(37, 38)
G.add_edge(37, 52)
G.add_edge(38, 39)
G.add_edge(38, 45)
G.add_edge(39, 40)
G.add_edge(39, 44)
G.add_edge(40, 41)
G.add_edge(40, 43)
G.add_edge(41, 42)
G.add_edge(42, 43)
G.add_edge(43, 44)
G.add_edge(44, 45)
G.add_edge(45, 46)
G.add_edge(46, 47)
G.add_edge(46, 59)
G.add_edge(47, 48)
G.add_edge(47, 57)
G.add_edge(48, 49)
G.add_edge(48, 55)
G.add_edge(49, 50)
G.add_edge(49, 54)
G.add_edge(50, 51)
G.add_edge(50, 53)
G.add_edge(51, 52)
G.add_edge(51, 56)
G.add_edge(52, 58)
G.add_edge(53, 54)
G.add_edge(53, 56)
G.add_edge(54, 55)
G.add_edge(55, 57)
G.add_edge(56, 58)
G.add_edge(57, 59)
G.add_edge(58, 67)
G.add_edge(59, 60)
G.add_edge(60, 61)
G.add_edge(60, 71)
G.add_edge(61, 62)
G.add_edge(61, 70)
G.add_edge(62, 63)
G.add_edge(62, 68)
G.add_edge(63, 64)
G.add_edge(63, 69)
G.add_edge(64, 65)
G.add_edge(64, 73)
G.add_edge(65, 66)
G.add_edge(65, 75)
G.add_edge(66, 67)
G.add_edge(66, 74)
G.add_edge(67, 72)
G.add_edge(68, 69)
G.add_edge(68, 70)
G.add_edge(69, 71)
G.add_edge(70, 71)
G.add_edge(72, 73)
G.add_edge(72, 74)
G.add_edge(73, 75)
G.add_edge(74, 75)
outerSize=14
countOfVertices=76
#Now adding vertices for each face, so that the graph is 3-connected.
G.add_edge(76, 13)
G.add_edge(76, 12)
G.add_edge(76, 11)
G.add_edge(76, 14)
G.add_edge(77, 14)
G.add_edge(77, 11)
G.add_edge(77, 10)
G.add_edge(77, 9)
G.add_edge(78, 2)
G.add_edge(78, 1)
G.add_edge(78, 0)
G.add_edge(78, 13)
G.add_edge(78, 14)
G.add_edge(78, 9)
G.add_edge(78, 8)
G.add_edge(78, 7)
G.add_edge(78, 6)
G.add_edge(78, 15)
G.add_edge(78, 16)
G.add_edge(78, 17)
G.add_edge(78, 18)
G.add_edge(78, 19)
G.add_edge(78, 20)
G.add_edge(79, 20)
G.add_edge(79, 6)
G.add_edge(79, 5)
G.add_edge(79, 4)
G.add_edge(80, 16)
G.add_edge(80, 17)
G.add_edge(80, 21)
G.add_edge(80, 22)
G.add_edge(81, 15)
G.add_edge(81, 16)
G.add_edge(81, 21)
G.add_edge(81, 23)
G.add_edge(82, 23)
G.add_edge(82, 21)
G.add_edge(82, 22)
G.add_edge(82, 24)
G.add_edge(83, 19)
G.add_edge(83, 20)
G.add_edge(83, 4)
G.add_edge(83, 3)
G.add_edge(83, 2)
G.add_edge(83, 15)
G.add_edge(83, 23)
G.add_edge(83, 24)
G.add_edge(83, 25)
G.add_edge(83, 26)
G.add_edge(83, 27)
G.add_edge(83, 28)
G.add_edge(83, 29)
G.add_edge(83, 30)
G.add_edge(83, 31)
G.add_edge(84, 25)
G.add_edge(84, 19)
G.add_edge(84, 18)
G.add_edge(84, 32)
G.add_edge(85, 26)
G.add_edge(85, 25)
G.add_edge(85, 32)
G.add_edge(85, 33)
G.add_edge(86, 27)
G.add_edge(86, 26)
G.add_edge(86, 33)
G.add_edge(86, 34)
G.add_edge(87, 28)
G.add_edge(87, 27)
G.add_edge(87, 34)
G.add_edge(87, 35)
G.add_edge(88, 35)
G.add_edge(88, 34)
G.add_edge(88, 33)
G.add_edge(88, 32)
G.add_edge(88, 18)
G.add_edge(88, 17)
G.add_edge(88, 22)
G.add_edge(88, 24)
G.add_edge(88, 31)
G.add_edge(88, 36)
G.add_edge(88, 37)
G.add_edge(88, 38)
G.add_edge(88, 39)
G.add_edge(88, 40)
G.add_edge(88, 41)
G.add_edge(89, 29)
G.add_edge(89, 28)
G.add_edge(89, 35)
G.add_edge(89, 36)
G.add_edge(90, 41)
G.add_edge(90, 31)
G.add_edge(90, 30)
G.add_edge(90, 42)
G.add_edge(91, 40)
G.add_edge(91, 41)
G.add_edge(91, 42)
G.add_edge(91, 43)
G.add_edge(92, 39)
G.add_edge(92, 40)
G.add_edge(92, 43)
G.add_edge(92, 44)
G.add_edge(93, 38)
G.add_edge(93, 39)
G.add_edge(93, 44)
G.add_edge(93, 45)
G.add_edge(94, 45)
G.add_edge(94, 44)
G.add_edge(94, 43)
G.add_edge(94, 42)
G.add_edge(94, 30)
G.add_edge(94, 29)
G.add_edge(94, 36)
G.add_edge(94, 37)
G.add_edge(94, 46)
G.add_edge(94, 47)
G.add_edge(94, 48)
G.add_edge(94, 49)
G.add_edge(94, 50)
G.add_edge(94, 51)
G.add_edge(94, 52)
G.add_edge(95, 50)
G.add_edge(95, 49)
G.add_edge(95, 53)
G.add_edge(95, 54)
G.add_edge(96, 54)
G.add_edge(96, 49)
G.add_edge(96, 48)
G.add_edge(96, 55)
G.add_edge(97, 51)
G.add_edge(97, 50)
G.add_edge(97, 53)
G.add_edge(97, 56)
G.add_edge(98, 55)
G.add_edge(98, 48)
G.add_edge(98, 47)
G.add_edge(98, 57)
G.add_edge(99, 52)
G.add_edge(99, 51)
G.add_edge(99, 56)
G.add_edge(99, 58)
G.add_edge(100, 46)
G.add_edge(100, 47)
G.add_edge(100, 57)
G.add_edge(100, 59)
G.add_edge(101, 59)
G.add_edge(101, 57)
G.add_edge(101, 55)
G.add_edge(101, 54)
G.add_edge(101, 53)
G.add_edge(101, 56)
G.add_edge(101, 58)
G.add_edge(101, 60)
G.add_edge(101, 61)
G.add_edge(101, 62)
G.add_edge(101, 63)
G.add_edge(101, 64)
G.add_edge(101, 65)
G.add_edge(101, 66)
G.add_edge(101, 67)
G.add_edge(102, 62)
G.add_edge(102, 63)
G.add_edge(102, 68)
G.add_edge(102, 69)
G.add_edge(103, 61)
G.add_edge(103, 62)
G.add_edge(103, 68)
G.add_edge(103, 70)
G.add_edge(104, 70)
G.add_edge(104, 68)
G.add_edge(104, 69)
G.add_edge(104, 71)
G.add_edge(105, 60)
G.add_edge(105, 61)
G.add_edge(105, 70)
G.add_edge(105, 71)
G.add_edge(106, 67)
G.add_edge(106, 58)
G.add_edge(106, 52)
G.add_edge(106, 37)
G.add_edge(106, 38)
G.add_edge(106, 45)
G.add_edge(106, 46)
G.add_edge(106, 59)
G.add_edge(106, 60)
G.add_edge(106, 71)
G.add_edge(106, 69)
G.add_edge(106, 63)
G.add_edge(106, 64)
G.add_edge(106, 72)
G.add_edge(106, 73)
G.add_edge(107, 66)
G.add_edge(107, 67)
G.add_edge(107, 72)
G.add_edge(107, 74)
G.add_edge(108, 65)
G.add_edge(108, 66)
G.add_edge(108, 74)
G.add_edge(108, 75)
G.add_edge(109, 75)
G.add_edge(109, 74)
G.add_edge(109, 72)
G.add_edge(109, 73)
G.add_edge(110, 64)
G.add_edge(110, 65)
G.add_edge(110, 75)
G.add_edge(110, 73)
def scaling(x,i,j,n):
    return x*(n-j)

A = G.adjacency_matrix();

n = G.num_verts()
Munscaled = matrix(QQ, n,n, lambda i,j:-A[i,j]/G.degree(i) if i>=outerSize else 0) + identity_matrix(n)
M=matrix(QQ,n,n,lambda i,j: scaling(Munscaled[i,j],i,j,n) if i>j & i<countOfVertices else Munscaled[i,j])
jednicky = matrix(QQ,n,1,lambda i,j: -1)
soucty = M*jednicky
for i in range (n-outerSize):
    M[i+outerSize,i+outerSize]+=soucty[i+outerSize,0]

vy = matrix(QQ,n,1, lambda i,j:round(sin(i/outerSize*2*pi)*1000) if i<outerSize else 0)
vx = matrix(QQ,n,1, lambda i,j:round(cos(i/outerSize*2*pi)*1000) if i<outerSize else 0)
resX=M.inverse() * vx
resY=M.inverse()*vy
i=0
d=[[resX[i],resY[i]] for i in range(n)]

G.graphplot(save_pos=True)
dd=G.get_pos()

for i in range(n):
    dd[i]=[resX[i,0],resY[i,0]]

G.set_pos(dd)
#removing vertices that were used to make graph 3-connected
ran = range(countOfVertices, n)
G.delete_vertices(ran)
G.show()
