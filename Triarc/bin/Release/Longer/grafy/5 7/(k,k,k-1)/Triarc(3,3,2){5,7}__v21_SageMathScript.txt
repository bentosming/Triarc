G = Graph()
G.add_edge(0, 1)
G.add_edge(0, 15)
G.add_edge(1, 2)
G.add_edge(2, 3)
G.add_edge(2, 18)
G.add_edge(3, 4)
G.add_edge(4, 5)
G.add_edge(4, 20)
G.add_edge(5, 6)
G.add_edge(6, 7)
G.add_edge(7, 8)
G.add_edge(8, 9)
G.add_edge(8, 19)
G.add_edge(9, 10)
G.add_edge(10, 11)
G.add_edge(10, 16)
G.add_edge(11, 12)
G.add_edge(12, 13)
G.add_edge(13, 14)
G.add_edge(14, 15)
G.add_edge(14, 17)
G.add_edge(16, 17)
G.add_edge(16, 19)
G.add_edge(17, 18)
G.add_edge(18, 20)
G.add_edge(19, 20)
outerSize=16
countOfVertices=21
#Now adding vertices for each face, so that the graph is 3-connected.
G.add_edge(21, 10)
G.add_edge(21, 11)
G.add_edge(21, 12)
G.add_edge(21, 13)
G.add_edge(21, 14)
G.add_edge(21, 16)
G.add_edge(21, 17)
G.add_edge(22, 17)
G.add_edge(22, 14)
G.add_edge(22, 15)
G.add_edge(22, 0)
G.add_edge(22, 1)
G.add_edge(22, 2)
G.add_edge(22, 18)
G.add_edge(23, 8)
G.add_edge(23, 9)
G.add_edge(23, 10)
G.add_edge(23, 16)
G.add_edge(23, 19)
G.add_edge(24, 4)
G.add_edge(24, 5)
G.add_edge(24, 6)
G.add_edge(24, 7)
G.add_edge(24, 8)
G.add_edge(24, 19)
G.add_edge(24, 20)
G.add_edge(25, 20)
G.add_edge(25, 19)
G.add_edge(25, 16)
G.add_edge(25, 17)
G.add_edge(25, 18)
G.add_edge(26, 2)
G.add_edge(26, 3)
G.add_edge(26, 4)
G.add_edge(26, 20)
G.add_edge(26, 18)
def scaling(x,i,j,n):
    return x*(n-j)

A = G.adjacency_matrix();

n = G.num_verts()
Munscaled = matrix(QQ, n,n, lambda i,j:-A[i,j]/G.degree(i) if i>=outerSize else 0) + identity_matrix(n)
M=matrix(QQ,n,n,lambda i,j: scaling(Munscaled[i,j],i,j,n) if i>j & i<countOfVertices else Munscaled[i,j])
jednicky = matrix(QQ,n,1,lambda i,j: -1)
soucty = M*jednicky
for i in range (n-outerSize):
    M[i+outerSize,i+outerSize]+=soucty[i+outerSize,0]

vy = matrix(QQ,n,1, lambda i,j:round(sin(i/outerSize*2*pi)*1000) if i<outerSize else 0)
vx = matrix(QQ,n,1, lambda i,j:round(cos(i/outerSize*2*pi)*1000) if i<outerSize else 0)
resX=M.inverse() * vx
resY=M.inverse()*vy
i=0
d=[[resX[i],resY[i]] for i in range(n)]

G.graphplot(save_pos=True)
dd=G.get_pos()

for i in range(n):
    dd[i]=[resX[i,0],resY[i,0]]

G.set_pos(dd)
#removing vertices that were used to make graph 3-connected
ran = range(countOfVertices, n)
G.delete_vertices(ran)
G.show()
